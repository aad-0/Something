
gen0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08009308  08009308  0000a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009368  08009368  0000b178  2**0
                  CONTENTS
  4 .ARM          00000008  08009368  08009368  0000a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009370  08009370  0000b178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009374  08009374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  08009378  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b178  2**0
                  CONTENTS
 10 .bss          000029d0  20000178  20000178  0000b178  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b48  20002b48  0000b178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ade8  00000000  00000000  0000b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004892  00000000  00000000  00025f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129d  00000000  00000000  0002c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026153  00000000  00000000  0002d32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f383  00000000  00000000  00053480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4ffb  00000000  00000000  00072803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001477fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000643c  00000000  00000000  00147844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0014dc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000178 	.word	0x20000178
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080092f0 	.word	0x080092f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000017c 	.word	0x2000017c
 80001c4:	080092f0 	.word	0x080092f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80004c2:	2300      	movs	r3, #0
 80004c4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004c6:	f001 f831 	bl	800152c <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 80004ca:	88fb      	ldrh	r3, [r7, #6]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80004d0:	f107 030f 	add.w	r3, r7, #15
 80004d4:	2201      	movs	r2, #1
 80004d6:	2120      	movs	r1, #32
 80004d8:	4618      	mov	r0, r3
 80004da:	f001 f885 	bl	80015e8 <ACCELERO_IO_Write>
}
 80004de:	bf00      	nop
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80004fe:	f001 f815 	bl	800152c <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	2201      	movs	r2, #1
 8000506:	210f      	movs	r1, #15
 8000508:	4618      	mov	r0, r3
 800050a:	f001 f89f 	bl	800164c <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 800050e:	79fb      	ldrb	r3, [r7, #7]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 8000522:	2300      	movs	r3, #0
 8000524:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000526:	f107 030f 	add.w	r3, r7, #15
 800052a:	2201      	movs	r2, #1
 800052c:	2121      	movs	r1, #33	@ 0x21
 800052e:	4618      	mov	r0, r3
 8000530:	f001 f88c 	bl	800164c <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f023 032f 	bic.w	r3, r3, #47	@ 0x2f
 800053a:	b2db      	uxtb	r3, r3
 800053c:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 800053e:	7bfa      	ldrb	r2, [r7, #15]
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4313      	orrs	r3, r2
 8000544:	b2db      	uxtb	r3, r3
 8000546:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000548:	f107 030f 	add.w	r3, r7, #15
 800054c:	2201      	movs	r2, #1
 800054e:	2121      	movs	r1, #33	@ 0x21
 8000550:	4618      	mov	r0, r3
 8000552:	f001 f849 	bl	80015e8 <ACCELERO_IO_Write>
}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b084      	sub	sp, #16
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800056a:	f107 030f 	add.w	r3, r7, #15
 800056e:	2201      	movs	r2, #1
 8000570:	2138      	movs	r1, #56	@ 0x38
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f86a 	bl	800164c <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000580:	4313      	orrs	r3, r2
 8000582:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000588:	4313      	orrs	r3, r2
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800058e:	f107 030f 	add.w	r3, r7, #15
 8000592:	2201      	movs	r2, #1
 8000594:	2138      	movs	r1, #56	@ 0x38
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f826 	bl	80015e8 <ACCELERO_IO_Write>
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 80005ae:	f000 ffeb 	bl	8001588 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80005b2:	2340      	movs	r3, #64	@ 0x40
 80005b4:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 80005b6:	2310      	movs	r3, #16
 80005b8:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80005ba:	2320      	movs	r3, #32
 80005bc:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ffcc 	bl	800055e <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 80005c6:	233f      	movs	r3, #63	@ 0x3f
 80005c8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	2201      	movs	r2, #1
 80005ce:	2122      	movs	r1, #34	@ 0x22
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 f809 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80005d6:	2350      	movs	r3, #80	@ 0x50
 80005d8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	2201      	movs	r2, #1
 80005de:	2138      	movs	r1, #56	@ 0x38
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 f801 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80005e6:	23aa      	movs	r3, #170	@ 0xaa
 80005e8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80005ea:	1dfb      	adds	r3, r7, #7
 80005ec:	2201      	movs	r2, #1
 80005ee:	213b      	movs	r1, #59	@ 0x3b
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fff9 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 80005f6:	230a      	movs	r3, #10
 80005f8:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	2201      	movs	r2, #1
 80005fe:	213c      	movs	r1, #60	@ 0x3c
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fff1 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 8000606:	234c      	movs	r3, #76	@ 0x4c
 8000608:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	2201      	movs	r2, #1
 800060e:	2130      	movs	r1, #48	@ 0x30
 8000610:	4618      	mov	r0, r3
 8000612:	f000 ffe9 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 8000616:	2303      	movs	r3, #3
 8000618:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	2201      	movs	r2, #1
 800061e:	213d      	movs	r1, #61	@ 0x3d
 8000620:	4618      	mov	r0, r3
 8000622:	f000 ffe1 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 8000626:	237f      	movs	r3, #127	@ 0x7f
 8000628:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	2201      	movs	r2, #1
 800062e:	213e      	movs	r1, #62	@ 0x3e
 8000630:	4618      	mov	r0, r3
 8000632:	f000 ffd9 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8000636:	237f      	movs	r3, #127	@ 0x7f
 8000638:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800063a:	1dfb      	adds	r3, r7, #7
 800063c:	2201      	movs	r2, #1
 800063e:	213f      	movs	r1, #63	@ 0x3f
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ffd1 	bl	80015e8 <ACCELERO_IO_Write>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8000658:	1dfb      	adds	r3, r7, #7
 800065a:	2201      	movs	r2, #1
 800065c:	2139      	movs	r1, #57	@ 0x39
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fff4 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2206      	movs	r2, #6
 800066a:	2127      	movs	r1, #39	@ 0x27
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffed 	bl	800164c <ACCELERO_IO_Read>
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	2201      	movs	r2, #1
 8000684:	2121      	movs	r1, #33	@ 0x21
 8000686:	4618      	mov	r0, r3
 8000688:	f000 ffe0 	bl	800164c <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000692:	b2db      	uxtb	r3, r3
 8000694:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	2201      	movs	r2, #1
 800069a:	2121      	movs	r1, #33	@ 0x21
 800069c:	4618      	mov	r0, r3
 800069e:	f000 ffa3 	bl	80015e8 <ACCELERO_IO_Write>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}

080006aa <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b088      	sub	sp, #32
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80006b2:	2312      	movs	r3, #18
 80006b4:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006ba:	f107 030f 	add.w	r3, r7, #15
 80006be:	2201      	movs	r2, #1
 80006c0:	2120      	movs	r1, #32
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ffc2 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	2206      	movs	r2, #6
 80006ce:	2129      	movs	r1, #41	@ 0x29
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 ffbb 	bl	800164c <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	77bb      	strb	r3, [r7, #30]
 80006da:	e00e      	b.n	80006fa <LIS302DL_ReadACC+0x50>
  {
    pnRawData[i] = buffer[2*i];
 80006dc:	7fbb      	ldrb	r3, [r7, #30]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	3320      	adds	r3, #32
 80006e2:	443b      	add	r3, r7
 80006e4:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	3320      	adds	r3, #32
 80006ee:	443b      	add	r3, r7
 80006f0:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80006f4:	7fbb      	ldrb	r3, [r7, #30]
 80006f6:	3301      	adds	r3, #1
 80006f8:	77bb      	strb	r3, [r7, #30]
 80006fa:	7fbb      	ldrb	r3, [r7, #30]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d9ed      	bls.n	80006dc <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	2b00      	cmp	r3, #0
 8000708:	d002      	beq.n	8000710 <LIS302DL_ReadACC+0x66>
 800070a:	2b20      	cmp	r3, #32
 800070c:	d003      	beq.n	8000716 <LIS302DL_ReadACC+0x6c>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 800070e:	e005      	b.n	800071c <LIS302DL_ReadACC+0x72>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8000710:	2312      	movs	r3, #18
 8000712:	77fb      	strb	r3, [r7, #31]
    break;
 8000714:	e002      	b.n	800071c <LIS302DL_ReadACC+0x72>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8000716:	2348      	movs	r3, #72	@ 0x48
 8000718:	77fb      	strb	r3, [r7, #31]
    break;
 800071a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800071c:	2300      	movs	r3, #0
 800071e:	77bb      	strb	r3, [r7, #30]
 8000720:	e014      	b.n	800074c <LIS302DL_ReadACC+0xa2>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000722:	7fbb      	ldrb	r3, [r7, #30]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	3320      	adds	r3, #32
 8000728:	443b      	add	r3, r7
 800072a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800072e:	b29a      	uxth	r2, r3
 8000730:	7ffb      	ldrb	r3, [r7, #31]
 8000732:	b29b      	uxth	r3, r3
 8000734:	fb12 f303 	smulbb	r3, r2, r3
 8000738:	b299      	uxth	r1, r3
 800073a:	7fbb      	ldrb	r3, [r7, #30]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	b20a      	sxth	r2, r1
 8000744:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000746:	7fbb      	ldrb	r3, [r7, #30]
 8000748:	3301      	adds	r3, #1
 800074a:	77bb      	strb	r3, [r7, #30]
 800074c:	7fbb      	ldrb	r3, [r7, #30]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d9e7      	bls.n	8000722 <LIS302DL_ReadACC+0x78>
  }
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 800076a:	f000 fedf 	bl	800152c <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 800076e:	88fb      	ldrh	r3, [r7, #6]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000774:	f107 030f 	add.w	r3, r7, #15
 8000778:	2201      	movs	r2, #1
 800077a:	2120      	movs	r1, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f000 ff33 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	b29b      	uxth	r3, r3
 8000788:	b2db      	uxtb	r3, r3
 800078a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 800078c:	f107 030f 	add.w	r3, r7, #15
 8000790:	2201      	movs	r2, #1
 8000792:	2124      	movs	r1, #36	@ 0x24
 8000794:	4618      	mov	r0, r3
 8000796:	f000 ff27 	bl	80015e8 <ACCELERO_IO_Write>
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80007ba:	f000 feb7 	bl	800152c <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	2201      	movs	r2, #1
 80007c2:	210f      	movs	r1, #15
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 ff41 	bl	800164c <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80007ca:	79fb      	ldrb	r3, [r7, #7]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80007f6:	f107 030f 	add.w	r3, r7, #15
 80007fa:	2201      	movs	r2, #1
 80007fc:	2123      	movs	r1, #35	@ 0x23
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fef2 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 800080c:	4313      	orrs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8000812:	f107 030f 	add.w	r3, r7, #15
 8000816:	2201      	movs	r2, #1
 8000818:	2121      	movs	r1, #33	@ 0x21
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fee4 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8000828:	4313      	orrs	r3, r2
 800082a:	b2db      	uxtb	r3, r3
 800082c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800082e:	f107 030f 	add.w	r3, r7, #15
 8000832:	2201      	movs	r2, #1
 8000834:	2122      	movs	r1, #34	@ 0x22
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fed6 	bl	80015e8 <ACCELERO_IO_Write>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 800084e:	f000 fe9b 	bl	8001588 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000856:	2300      	movs	r3, #0
 8000858:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000862:	2301      	movs	r3, #1
 8000864:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000866:	2300      	movs	r3, #0
 8000868:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 800086a:	463b      	mov	r3, r7
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ffb1 	bl	80007d4 <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000872:	2303      	movs	r3, #3
 8000874:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000876:	1dfb      	adds	r3, r7, #7
 8000878:	2201      	movs	r2, #1
 800087a:	2152      	movs	r1, #82	@ 0x52
 800087c:	4618      	mov	r0, r3
 800087e:	f000 feb3 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000882:	23c8      	movs	r3, #200	@ 0xc8
 8000884:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	2201      	movs	r2, #1
 800088a:	2154      	movs	r1, #84	@ 0x54
 800088c:	4618      	mov	r0, r3
 800088e:	f000 feab 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8000892:	2345      	movs	r3, #69	@ 0x45
 8000894:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	2201      	movs	r2, #1
 800089a:	2156      	movs	r1, #86	@ 0x56
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fea3 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 80008a2:	23fc      	movs	r3, #252	@ 0xfc
 80008a4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	2201      	movs	r2, #1
 80008aa:	215a      	movs	r1, #90	@ 0x5a
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fe9b 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 80008b2:	23a1      	movs	r3, #161	@ 0xa1
 80008b4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	2201      	movs	r2, #1
 80008ba:	215b      	movs	r1, #91	@ 0x5b
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fe93 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0x01; 
 80008c2:	2301      	movs	r3, #1
 80008c4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	2201      	movs	r2, #1
 80008ca:	215c      	movs	r1, #92	@ 0x5c
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fe8b 	bl	80015e8 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	2201      	movs	r2, #1
 80008d6:	217b      	movs	r1, #123	@ 0x7b
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fe85 	bl	80015e8 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	2201      	movs	r2, #1
 80008e2:	2160      	movs	r1, #96	@ 0x60
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 fe7f 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0x06; 
 80008ea:	2306      	movs	r3, #6
 80008ec:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	2201      	movs	r2, #1
 80008f2:	2161      	movs	r1, #97	@ 0x61
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fe77 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0x28; 
 80008fa:	2328      	movs	r3, #40	@ 0x28
 80008fc:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2201      	movs	r2, #1
 8000902:	2162      	movs	r1, #98	@ 0x62
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fe6f 	bl	80015e8 <ACCELERO_IO_Write>
  ctrl=0x11; 
 800090a:	2311      	movs	r3, #17
 800090c:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	2201      	movs	r2, #1
 8000912:	2163      	movs	r1, #99	@ 0x63
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fe67 	bl	80015e8 <ACCELERO_IO_Write>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	2201      	movs	r2, #1
 800092c:	2125      	movs	r1, #37	@ 0x25
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fe8c 	bl	800164c <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800093a:	b2db      	uxtb	r3, r3
 800093c:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	2125      	movs	r1, #37	@ 0x25
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fe4f 	bl	80015e8 <ACCELERO_IO_Write>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000960:	4b64      	ldr	r3, [pc, #400]	@ (8000af4 <LIS3DSH_ReadACC+0x1a0>)
 8000962:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800096a:	f107 030b 	add.w	r3, r7, #11
 800096e:	2201      	movs	r2, #1
 8000970:	2124      	movs	r1, #36	@ 0x24
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fe6a 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2201      	movs	r2, #1
 800097e:	2128      	movs	r1, #40	@ 0x28
 8000980:	4618      	mov	r0, r3
 8000982:	f000 fe63 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	3301      	adds	r3, #1
 800098c:	2201      	movs	r2, #1
 800098e:	2129      	movs	r1, #41	@ 0x29
 8000990:	4618      	mov	r0, r3
 8000992:	f000 fe5b 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	3302      	adds	r3, #2
 800099c:	2201      	movs	r2, #1
 800099e:	212a      	movs	r1, #42	@ 0x2a
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fe53 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	3303      	adds	r3, #3
 80009ac:	2201      	movs	r2, #1
 80009ae:	212b      	movs	r1, #43	@ 0x2b
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fe4b 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	3304      	adds	r3, #4
 80009bc:	2201      	movs	r2, #1
 80009be:	212c      	movs	r1, #44	@ 0x2c
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fe43 	bl	800164c <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	3305      	adds	r3, #5
 80009cc:	2201      	movs	r2, #1
 80009ce:	212d      	movs	r1, #45	@ 0x2d
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fe3b 	bl	800164c <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 80009d6:	7afb      	ldrb	r3, [r7, #11]
 80009d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80009dc:	2b20      	cmp	r3, #32
 80009de:	d854      	bhi.n	8000a8a <LIS3DSH_ReadACC+0x136>
 80009e0:	a201      	add	r2, pc, #4	@ (adr r2, 80009e8 <LIS3DSH_ReadACC+0x94>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a6d 	.word	0x08000a6d
 80009ec:	08000a8b 	.word	0x08000a8b
 80009f0:	08000a8b 	.word	0x08000a8b
 80009f4:	08000a8b 	.word	0x08000a8b
 80009f8:	08000a8b 	.word	0x08000a8b
 80009fc:	08000a8b 	.word	0x08000a8b
 8000a00:	08000a8b 	.word	0x08000a8b
 8000a04:	08000a8b 	.word	0x08000a8b
 8000a08:	08000a73 	.word	0x08000a73
 8000a0c:	08000a8b 	.word	0x08000a8b
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a8b 	.word	0x08000a8b
 8000a18:	08000a8b 	.word	0x08000a8b
 8000a1c:	08000a8b 	.word	0x08000a8b
 8000a20:	08000a8b 	.word	0x08000a8b
 8000a24:	08000a8b 	.word	0x08000a8b
 8000a28:	08000a79 	.word	0x08000a79
 8000a2c:	08000a8b 	.word	0x08000a8b
 8000a30:	08000a8b 	.word	0x08000a8b
 8000a34:	08000a8b 	.word	0x08000a8b
 8000a38:	08000a8b 	.word	0x08000a8b
 8000a3c:	08000a8b 	.word	0x08000a8b
 8000a40:	08000a8b 	.word	0x08000a8b
 8000a44:	08000a8b 	.word	0x08000a8b
 8000a48:	08000a7f 	.word	0x08000a7f
 8000a4c:	08000a8b 	.word	0x08000a8b
 8000a50:	08000a8b 	.word	0x08000a8b
 8000a54:	08000a8b 	.word	0x08000a8b
 8000a58:	08000a8b 	.word	0x08000a8b
 8000a5c:	08000a8b 	.word	0x08000a8b
 8000a60:	08000a8b 	.word	0x08000a8b
 8000a64:	08000a8b 	.word	0x08000a8b
 8000a68:	08000a85 	.word	0x08000a85
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <LIS3DSH_ReadACC+0x1a0>)
 8000a6e:	61bb      	str	r3, [r7, #24]
    break;
 8000a70:	e00c      	b.n	8000a8c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <LIS3DSH_ReadACC+0x1a4>)
 8000a74:	61bb      	str	r3, [r7, #24]
    break;
 8000a76:	e009      	b.n	8000a8c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000a78:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <LIS3DSH_ReadACC+0x1a8>)
 8000a7a:	61bb      	str	r3, [r7, #24]
    break;
 8000a7c:	e006      	b.n	8000a8c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	@ (8000b00 <LIS3DSH_ReadACC+0x1ac>)
 8000a80:	61bb      	str	r3, [r7, #24]
    break;
 8000a82:	e003      	b.n	8000a8c <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <LIS3DSH_ReadACC+0x1b0>)
 8000a86:	61bb      	str	r3, [r7, #24]
    break;
 8000a88:	e000      	b.n	8000a8c <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000a8a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	77fb      	strb	r3, [r7, #31]
 8000a90:	e027      	b.n	8000ae2 <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000a92:	7ffb      	ldrb	r3, [r7, #31]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	3301      	adds	r3, #1
 8000a98:	3320      	adds	r3, #32
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000aa0:	021b      	lsls	r3, r3, #8
 8000aa2:	7ffa      	ldrb	r2, [r7, #31]
 8000aa4:	0052      	lsls	r2, r2, #1
 8000aa6:	3220      	adds	r2, #32
 8000aa8:	443a      	add	r2, r7
 8000aaa:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000aae:	4413      	add	r3, r2
 8000ab0:	ee07 3a90 	vmov	s15, r3
 8000ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac0:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000ac4:	7ffb      	ldrb	r3, [r7, #31]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4413      	add	r3, r2
 8000acc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad4:	ee17 2a90 	vmov	r2, s15
 8000ad8:	b212      	sxth	r2, r2
 8000ada:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000adc:	7ffb      	ldrb	r3, [r7, #31]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	77fb      	strb	r3, [r7, #31]
 8000ae2:	7ffb      	ldrb	r3, [r7, #31]
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d9d4      	bls.n	8000a92 <LIS3DSH_ReadACC+0x13e>
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	3d75c28f 	.word	0x3d75c28f
 8000af8:	3df5c28f 	.word	0x3df5c28f
 8000afc:	3e3851ec 	.word	0x3e3851ec
 8000b00:	3e75c28f 	.word	0x3e75c28f
 8000b04:	3f3ae148 	.word	0x3f3ae148

08000b08 <RingBuffer_Init>:
 * @retval Status Code
 */
int32_t RingBuffer_Init(RingBuffer_TypeDef * const pInit,
                     void * const pBuffer,
                     uint32_t const Length)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	pInit->Length = Length;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
	pInit->pBuffer = pBuffer;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	605a      	str	r2, [r3, #4]

	pInit->WriteIdx = 0;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
	pInit->ReadIdx = 0;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]

	return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <UartSlaveAccel_Init>:

void UartSlaveAccel_StateMachine ();


int32_t UartSlaveAccel_Init (UartSlaveAccel_TypeDef * pInit, UartSlaveIo_TypeDef * pIoContext, uint16_t SlaveId)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	4613      	mov	r3, r2
 8000b48:	80fb      	strh	r3, [r7, #6]
	UartSlave_Init (& pInit->UartSlaveInstance, pIoContext, SlaveId);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	88fa      	ldrh	r2, [r7, #6]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 fe88 	bl	8006866 <UartSlave_Init>
	pInit->u32AxisMask = UARTSLAVEACCEL_AXISMASK_GETX | UARTSLAVEACCEL_AXISMASK_GETY | UARTSLAVEACCEL_AXISMASK_GETZ;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2307      	movs	r3, #7
 8000b60:	6293      	str	r3, [r2, #40]	@ 0x28

	lowpass_Init(&pInit->LowpassAccelX, 0.02);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8000b68:	3314      	adds	r3, #20
 8000b6a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8000bcc <UartSlaveAccel_Init+0x90>
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fa5e 	bl	8001030 <lowpass_Init>
	lowpass_Init(&pInit->LowpassAccelY, 0.02);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8000b7a:	331c      	adds	r3, #28
 8000b7c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000bcc <UartSlaveAccel_Init+0x90>
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fa55 	bl	8001030 <lowpass_Init>
	lowpass_Init(&pInit->LowpassAccelZ, 0.02);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000bcc <UartSlaveAccel_Init+0x90>
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fa4c 	bl	8001030 <lowpass_Init>
	pInit->pi16AccelXYZ [0] = 0;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	859a      	strh	r2, [r3, #44]	@ 0x2c
	pInit->pi16AccelXYZ [1] = 0;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000ba8:	2200      	movs	r2, #0
 8000baa:	85da      	strh	r2, [r3, #46]	@ 0x2e
	pInit->pi16AccelXYZ [2] = 0;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	861a      	strh	r2, [r3, #48]	@ 0x30

	pInit->UartSlaveInstance.pfvStateMachine = UartSlaveAccel_StateMachine;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <UartSlaveAccel_Init+0x94>)
 8000bc0:	6253      	str	r3, [r2, #36]	@ 0x24

	return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	3ca3d70a 	.word	0x3ca3d70a
 8000bd0:	08000bd5 	.word	0x08000bd5

08000bd4 <UartSlaveAccel_StateMachine>:


static UartSlaveMessage_TypeDef txMessage;
void UartSlaveAccel_StateMachine (void * pSlaveDevice)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	UartSlaveAccel_TypeDef * pDevice = (UartSlaveAccel_TypeDef *) pSlaveDevice;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
	// get accels
	BSP_ACCELERO_GetXYZ(& pDevice->pi16AccelXYZ [0]);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8000be6:	330c      	adds	r3, #12
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fe0d 	bl	8001808 <BSP_ACCELERO_GetXYZ>
	// update the lowpasses
    lowpass_update(&pDevice->LowpassAccelX, (float)pDevice->pi16AccelXYZ[0]);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8000bf4:	3314      	adds	r3, #20
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000bfc:	f9b2 202c 	ldrsh.w	r2, [r2, #44]	@ 0x2c
 8000c00:	ee07 2a90 	vmov	s15, r2
 8000c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c08:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fa23 	bl	8001058 <lowpass_update>
    lowpass_update(&pDevice->LowpassAccelY, (float)pDevice->pi16AccelXYZ[1]);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 8000c18:	331c      	adds	r3, #28
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000c20:	f9b2 202e 	ldrsh.w	r2, [r2, #46]	@ 0x2e
 8000c24:	ee07 2a90 	vmov	s15, r2
 8000c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 fa11 	bl	8001058 <lowpass_update>
    lowpass_update(&pDevice->LowpassAccelZ, (float)pDevice->pi16AccelXYZ[2]);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8000c44:	f9b2 2030 	ldrsh.w	r2, [r2, #48]	@ 0x30
 8000c48:	ee07 2a90 	vmov	s15, r2
 8000c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c50:	eeb0 0a67 	vmov.f32	s0, s15
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 f9ff 	bl	8001058 <lowpass_update>

//    static UartSlaveMessage_TypeDef txMessage;
    txMessage.u8Heading = 0xAA;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000c5c:	22aa      	movs	r2, #170	@ 0xaa
 8000c5e:	701a      	strb	r2, [r3, #0]
    txMessage.u16SlaveId = pDevice->UartSlaveInstance.u16SlaveId;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	4b27      	ldr	r3, [pc, #156]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000c66:	805a      	strh	r2, [r3, #2]
    txMessage.u8Command = pDevice->UartSlaveInstance.u32CommandMode;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000c70:	711a      	strb	r2, [r3, #4]
    txMessage.u32Tick = HAL_GetTick();
 8000c72:	f000 ff65 	bl	8001b40 <HAL_GetTick>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a22      	ldr	r2, [pc, #136]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000c7a:	6093      	str	r3, [r2, #8]

    txMessage.u16AxisX = pDevice->pi16AccelXYZ[0];
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c82:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8000c86:	ee07 3a90 	vmov	s15, r3
 8000c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000c90:	edc3 7a03 	vstr	s15, [r3, #12]
    txMessage.u16AxisY = pDevice->pi16AccelXYZ[1];
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000c9a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000ca8:	edc3 7a04 	vstr	s15, [r3, #16]
    txMessage.u16AxisZ = pDevice->pi16AccelXYZ[2];
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000cb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8000cb6:	ee07 3a90 	vmov	s15, r3
 8000cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000cc0:	edc3 7a05 	vstr	s15, [r3, #20]
//    txMessage.u16AxisX = pDevice->LowpassAccelX.out;
//    txMessage.u16AxisY = pDevice->LowpassAccelY.out;
//    txMessage.u16AxisZ = pDevice->LowpassAccelZ.out;


	switch (pDevice->UartSlaveInstance.u32CommandMode)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d012      	beq.n	8000cf2 <UartSlaveAccel_StateMachine+0x11e>
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d112      	bne.n	8000cf6 <UartSlaveAccel_StateMachine+0x122>
	{
	case UARTSLAVE_COMMAND_MODE_STREAM:
		if (pDevice->UartSlaveInstance.u32TxFlags && UARTSLAVE_ACCEL_FLAG_TX)
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d010      	beq.n	8000cfa <UartSlaveAccel_StateMachine+0x126>
		{
			pDevice->UartSlaveInstance.pIoContext->pfvTx (& txMessage, sizeof(txMessage));
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	2118      	movs	r1, #24
 8000ce0:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <UartSlaveAccel_StateMachine+0x130>)
 8000ce2:	4798      	blx	r3
			xvUartSlaveClearTxFlag(&pDevice->UartSlaveInstance, UARTSLAVE_ACCEL_FLAG_TX);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f023 0202 	bic.w	r2, r3, #2
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	609a      	str	r2, [r3, #8]
		}
		break;
 8000cf0:	e003      	b.n	8000cfa <UartSlaveAccel_StateMachine+0x126>
	case UARTSLAVE_COMMAND_MODE_ONREQUEST:
		///@ todo
		break;
 8000cf2:	bf00      	nop
 8000cf4:	e002      	b.n	8000cfc <UartSlaveAccel_StateMachine+0x128>

	case UARTSLAVE_COMMAND_MODE_NONE:
	default:
		break;
 8000cf6:	bf00      	nop
 8000cf8:	e000      	b.n	8000cfc <UartSlaveAccel_StateMachine+0x128>
		break;
 8000cfa:	bf00      	nop
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000194 	.word	0x20000194

08000d08 <MX_GPIO_Init>:
     PC7   ------> I2S3_MCK
     PC10   ------> I2S3_CK
     PC12   ------> I2S3_SD
*/
void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	@ 0x30
 8000d0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	4b82      	ldr	r3, [pc, #520]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a81      	ldr	r2, [pc, #516]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a7a      	ldr	r2, [pc, #488]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b78      	ldr	r3, [pc, #480]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b74      	ldr	r3, [pc, #464]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a73      	ldr	r2, [pc, #460]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b71      	ldr	r3, [pc, #452]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b6d      	ldr	r3, [pc, #436]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a6c      	ldr	r2, [pc, #432]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b6a      	ldr	r3, [pc, #424]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b66      	ldr	r3, [pc, #408]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a65      	ldr	r2, [pc, #404]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b63      	ldr	r3, [pc, #396]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b5f      	ldr	r3, [pc, #380]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	4a5e      	ldr	r2, [pc, #376]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dba:	4b5c      	ldr	r3, [pc, #368]	@ (8000f2c <MX_GPIO_Init+0x224>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4859      	ldr	r0, [pc, #356]	@ (8000f30 <MX_GPIO_Init+0x228>)
 8000dcc:	f001 fa92 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4857      	ldr	r0, [pc, #348]	@ (8000f34 <MX_GPIO_Init+0x22c>)
 8000dd6:	f001 fa8d 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000de0:	4855      	ldr	r0, [pc, #340]	@ (8000f38 <MX_GPIO_Init+0x230>)
 8000de2:	f001 fa87 	bl	80022f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000de6:	2308      	movs	r3, #8
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	484c      	ldr	r0, [pc, #304]	@ (8000f30 <MX_GPIO_Init+0x228>)
 8000dfe:	f000 ffe1 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4846      	ldr	r0, [pc, #280]	@ (8000f34 <MX_GPIO_Init+0x22c>)
 8000e1a:	f000 ffd3 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	483e      	ldr	r0, [pc, #248]	@ (8000f34 <MX_GPIO_Init+0x22c>)
 8000e3a:	f000 ffc3 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e42:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	483a      	ldr	r0, [pc, #232]	@ (8000f3c <MX_GPIO_Init+0x234>)
 8000e54:	f000 ffb6 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e68:	2306      	movs	r3, #6
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4832      	ldr	r0, [pc, #200]	@ (8000f3c <MX_GPIO_Init+0x234>)
 8000e74:	f000 ffa6 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482d      	ldr	r0, [pc, #180]	@ (8000f40 <MX_GPIO_Init+0x238>)
 8000e8c:	f000 ff9a 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	2302      	movs	r3, #2
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4824      	ldr	r0, [pc, #144]	@ (8000f40 <MX_GPIO_Init+0x238>)
 8000eae:	f000 ff89 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000eb2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000eb6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481b      	ldr	r0, [pc, #108]	@ (8000f38 <MX_GPIO_Init+0x230>)
 8000ecc:	f000 ff7a 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ed0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	4619      	mov	r1, r3
 8000eec:	4811      	ldr	r0, [pc, #68]	@ (8000f34 <MX_GPIO_Init+0x22c>)
 8000eee:	f000 ff69 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <MX_GPIO_Init+0x230>)
 8000f06:	f000 ff5d 	bl	8001dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f0e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <MX_GPIO_Init+0x228>)
 8000f20:	f000 ff50 	bl	8001dc4 <HAL_GPIO_Init>

}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	@ 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400

08000f44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f4a:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <MX_I2C1_Init+0x54>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f50:	4a12      	ldr	r2, [pc, #72]	@ (8000f9c <MX_I2C1_Init+0x58>)
 8000f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f68:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6e:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f74:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	@ (8000f94 <MX_I2C1_Init+0x50>)
 8000f82:	f001 f9d1 	bl	8002328 <HAL_I2C_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f8c:	f000 f98e 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001ac 	.word	0x200001ac
 8000f98:	40005400 	.word	0x40005400
 8000f9c:	000186a0 	.word	0x000186a0

08000fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a19      	ldr	r2, [pc, #100]	@ (8001024 <HAL_I2C_MspInit+0x84>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d12c      	bne.n	800101c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fde:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480c      	ldr	r0, [pc, #48]	@ (800102c <HAL_I2C_MspInit+0x8c>)
 8000ffc:	f000 fee2 	bl	8001dc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 800100a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_I2C_MspInit+0x88>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	@ 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40005400 	.word	0x40005400
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <lowpass_Init>:
#include "lowpass.h"

int32_t lowpass_Init (Lowpass_TypeDef * pInit, float Alpha)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	ed87 0a00 	vstr	s0, [r7]
	pInit->alpha = Alpha;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	601a      	str	r2, [r3, #0]
	pInit->out = 0;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	605a      	str	r2, [r3, #4]

	return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <lowpass_update>:

float lowpass_update (Lowpass_TypeDef * pInit, float New)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	ed87 0a00 	vstr	s0, [r7]
	pInit->out = pInit->alpha *New + (1 - pInit->alpha) * pInit->out;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	ed93 7a00 	vldr	s14, [r3]
 800106a:	edd7 7a00 	vldr	s15, [r7]
 800106e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800107c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	edd3 7a01 	vldr	s15, [r3, #4]
 8001086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]
	return pInit->out;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	ee07 3a90 	vmov	s15, r3
}
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
//					NULL,
//					NULL,
//					CDC_Transmit_FS,
//					NULL
//			};
	UartSlaveAccel_Init (& uartSlaveAccelDevice, & uartSlaveAccelDeviceIoContext, 0x16U);
 80010b0:	2216      	movs	r2, #22
 80010b2:	4931      	ldr	r1, [pc, #196]	@ (8001178 <main+0xcc>)
 80010b4:	4831      	ldr	r0, [pc, #196]	@ (800117c <main+0xd0>)
 80010b6:	f7ff fd41 	bl	8000b3c <UartSlaveAccel_Init>
	uartSlaveDevices [0].Parent = & uartSlaveAccelDevice.UartSlaveInstance;
 80010ba:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <main+0xd4>)
 80010bc:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <main+0xd0>)
 80010be:	601a      	str	r2, [r3, #0]
	uartSlaveDevices [0].Child = & uartSlaveAccelDevice;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <main+0xd4>)
 80010c2:	4a2e      	ldr	r2, [pc, #184]	@ (800117c <main+0xd0>)
 80010c4:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f000 fcd5 	bl	8001a74 <HAL_Init>
  /* USER CODE BEGIN Init */
  // BSP_ACCELERO_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f867 	bl	800119c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 80010ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d2:	f000 fd41 	bl	8001b58 <HAL_Delay>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80010d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <main+0xd8>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4a2a      	ldr	r2, [pc, #168]	@ (8001184 <main+0xd8>)
 80010dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010e0:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <main+0xdc>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <main+0xdc>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ee:	f7ff fe0b 	bl	8000d08 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010f2:	f7ff ff27 	bl	8000f44 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010f6:	f000 f8df 	bl	80012b8 <MX_SPI1_Init>
  MX_TIM9_Init();
 80010fa:	f000 fc2f 	bl	800195c <MX_TIM9_Init>
  MX_USB_DEVICE_Init();
 80010fe:	f007 fba3 	bl	8008848 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  BSP_ACCELERO_Init();
 8001102:	f000 fadd 	bl	80016c0 <BSP_ACCELERO_Init>
  HAL_TIM_Base_Init(&htim9);
 8001106:	4821      	ldr	r0, [pc, #132]	@ (800118c <main+0xe0>)
 8001108:	f003 fc6c 	bl	80049e4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start_IT(&htim9);
 800110c:	481f      	ldr	r0, [pc, #124]	@ (800118c <main+0xe0>)
 800110e:	f003 fcb9 	bl	8004a84 <HAL_TIM_Base_Start_IT>
  accelId = BSP_ACCELERO_ReadID();
 8001112:	f000 fb61 	bl	80017d8 <BSP_ACCELERO_ReadID>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <main+0xe4>)
 800111c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GetTick();
 800111e:	f000 fd0f 	bl	8001b40 <HAL_GetTick>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (1 == tim9_elapsed)
 8001122:	4b1c      	ldr	r3, [pc, #112]	@ (8001194 <main+0xe8>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <main+0x90>
//        lowpass_update(&accelY, (float)accelXYZ[IDX_Y]);
//        lowpass_update(&accelZ, (float)accelXYZ[IDX_Z]);
//        end_tick = DWT->CYCCNT;
//        time = (float)(end_tick-   start_tick)/(SystemCoreClock/1000.0);

    	xvUartSlaveSetTxFlag(&uartSlaveAccelDevice.UartSlaveInstance, UARTSLAVE_ACCEL_FLAG_TX);
 800112a:	4b14      	ldr	r3, [pc, #80]	@ (800117c <main+0xd0>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f043 0302 	orr.w	r3, r3, #2
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <main+0xd0>)
 8001134:	6093      	str	r3, [r2, #8]
    	tim9_elapsed = 0;
 8001136:	4b17      	ldr	r3, [pc, #92]	@ (8001194 <main+0xe8>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
    }

    for (idxUartSlave = 0; idxUartSlave < UARTSLAVE_DEVICE_COUNT; ++idxUartSlave)
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <main+0xec>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e014      	b.n	800116e <main+0xc2>
    {
    	uartSlaveDevices [idxUartSlave].Parent -> pfvStateMachine (uartSlaveDevices [idxUartSlave].Child );
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <main+0xec>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <main+0xd4>)
 800114a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800114e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001152:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <main+0xec>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4909      	ldr	r1, [pc, #36]	@ (8001180 <main+0xd4>)
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	4790      	blx	r2
    for (idxUartSlave = 0; idxUartSlave < UARTSLAVE_DEVICE_COUNT; ++idxUartSlave)
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <main+0xec>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <main+0xec>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <main+0xec>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0e6      	beq.n	8001144 <main+0x98>
    if (1 == tim9_elapsed)
 8001176:	e7d4      	b.n	8001122 <main+0x76>
 8001178:	20000068 	.word	0x20000068
 800117c:	20000218 	.word	0x20000218
 8001180:	20000210 	.word	0x20000210
 8001184:	e000edf0 	.word	0xe000edf0
 8001188:	e0001000 	.word	0xe0001000
 800118c:	20001318 	.word	0x20001318
 8001190:	20000200 	.word	0x20000200
 8001194:	2000020c 	.word	0x2000020c
 8001198:	20000204 	.word	0x20000204

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	@ 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 f874 	bl	8009298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <SystemClock_Config+0xcc>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a27      	ldr	r2, [pc, #156]	@ (8001268 <SystemClock_Config+0xcc>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <SystemClock_Config+0xcc>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <SystemClock_Config+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a21      	ldr	r2, [pc, #132]	@ (800126c <SystemClock_Config+0xd0>)
 80011e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <SystemClock_Config+0xd0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f8:	2301      	movs	r3, #1
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001202:	2302      	movs	r3, #2
 8001204:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800120c:	2308      	movs	r3, #8
 800120e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001210:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001214:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800121a:	2307      	movs	r3, #7
 800121c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121e:	f107 0320 	add.w	r3, r7, #32
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fc16 	bl	8003a54 <HAL_RCC_OscConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800122e:	f000 f83d 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001232:	230f      	movs	r3, #15
 8001234:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001236:	2302      	movs	r3, #2
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800123e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2105      	movs	r1, #5
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fe77 	bl	8003f44 <HAL_RCC_ClockConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800125c:	f000 f826 	bl	80012ac <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3750      	adds	r7, #80	@ 0x50
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800
 800126c:	40007000 	.word	0x40007000

08001270 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

  if (&htim9 == htim)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a08      	ldr	r2, [pc, #32]	@ (800129c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d106      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x1e>
  {

  	start_tick = DWT->CYCCNT;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001286:	6013      	str	r3, [r2, #0]
	  tim9_elapsed = 1;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
  }

}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20001318 	.word	0x20001318
 80012a0:	e0001000 	.word	0xe0001000
 80012a4:	20000208 	.word	0x20000208
 80012a8:	2000020c 	.word	0x2000020c

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <Error_Handler+0x8>

080012b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012bc:	4b17      	ldr	r3, [pc, #92]	@ (800131c <MX_SPI1_Init+0x64>)
 80012be:	4a18      	ldr	r2, [pc, #96]	@ (8001320 <MX_SPI1_Init+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_SPI1_Init+0x64>)
 80012c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_SPI1_Init+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_SPI1_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_SPI1_Init+0x64>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_SPI1_Init+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_SPI1_Init+0x64>)
 80012e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_SPI1_Init+0x64>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_SPI1_Init+0x64>)
 80012fe:	2200      	movs	r2, #0
 8001300:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_SPI1_Init+0x64>)
 8001304:	220a      	movs	r2, #10
 8001306:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_SPI1_Init+0x64>)
 800130a:	f003 f827 	bl	800435c <HAL_SPI_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001314:	f7ff ffca 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20001264 	.word	0x20001264
 8001320:	40013000 	.word	0x40013000

08001324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	@ 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	@ (80013a8 <HAL_SPI_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12b      	bne.n	800139e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	4a17      	ldr	r2, [pc, #92]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001350:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001354:	6453      	str	r3, [r2, #68]	@ 0x44
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	4a10      	ldr	r2, [pc, #64]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	@ 0x30
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <HAL_SPI_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800137e:	23e0      	movs	r3, #224	@ 0xe0
 8001380:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138e:	2305      	movs	r3, #5
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <HAL_SPI_MspInit+0x8c>)
 800139a:	f000 fd13 	bl	8001dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800139e:	bf00      	nop
 80013a0:	3728      	adds	r7, #40	@ 0x28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40013000 	.word	0x40013000
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000

080013b4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_SPI_MspDeInit+0x30>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d109      	bne.n	80013da <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_SPI_MspDeInit+0x34>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a07      	ldr	r2, [pc, #28]	@ (80013e8 <HAL_SPI_MspDeInit+0x34>)
 80013cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80013d2:	21e0      	movs	r1, #224	@ 0xe0
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <HAL_SPI_MspDeInit+0x38>)
 80013d6:	f000 fe91 	bl	80020fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40013000 	.word	0x40013000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020000 	.word	0x40020000

080013f0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80013f4:	4819      	ldr	r0, [pc, #100]	@ (800145c <SPIx_Init+0x6c>)
 80013f6:	f003 fa0b 	bl	8004810 <HAL_SPI_GetState>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12a      	bne.n	8001456 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <SPIx_Init+0x6c>)
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <SPIx_Init+0x70>)
 8001404:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <SPIx_Init+0x6c>)
 8001408:	2218      	movs	r2, #24
 800140a:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <SPIx_Init+0x6c>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <SPIx_Init+0x6c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001418:	4b10      	ldr	r3, [pc, #64]	@ (800145c <SPIx_Init+0x6c>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <SPIx_Init+0x6c>)
 8001420:	2200      	movs	r2, #0
 8001422:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001424:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <SPIx_Init+0x6c>)
 8001426:	2207      	movs	r2, #7
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <SPIx_Init+0x6c>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <SPIx_Init+0x6c>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <SPIx_Init+0x6c>)
 8001438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800143c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800143e:	4b07      	ldr	r3, [pc, #28]	@ (800145c <SPIx_Init+0x6c>)
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <SPIx_Init+0x6c>)
 8001446:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144a:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 800144c:	f000 f836 	bl	80014bc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <SPIx_Init+0x6c>)
 8001452:	f002 ff83 	bl	800435c <HAL_SPI_Init>
  }
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200012bc 	.word	0x200012bc
 8001460:	40013000 	.word	0x40013000

08001464 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af02      	add	r7, sp, #8
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <SPIx_WriteRead+0x38>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f107 020f 	add.w	r2, r7, #15
 800147a:	1df9      	adds	r1, r7, #7
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <SPIx_WriteRead+0x3c>)
 8001482:	f003 f81c 	bl	80044be <HAL_SPI_TransmitReceive>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 800148c:	f000 f80a 	bl	80014a4 <SPIx_Error>
  }
  
  return receivedbyte;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000078 	.word	0x20000078
 80014a0:	200012bc 	.word	0x200012bc

080014a4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 80014a8:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <SPIx_Error+0x14>)
 80014aa:	f002 ffe0 	bl	800446e <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 80014ae:	f7ff ff9f 	bl	80013f0 <SPIx_Init>
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200012bc 	.word	0x200012bc

080014bc <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <SPIx_MspInit+0x68>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a16      	ldr	r2, [pc, #88]	@ (8001524 <SPIx_MspInit+0x68>)
 80014cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <SPIx_MspInit+0x68>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <SPIx_MspInit+0x68>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <SPIx_MspInit+0x68>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <SPIx_MspInit+0x68>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 80014fa:	23e0      	movs	r3, #224	@ 0xe0
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 8001502:	2302      	movs	r3, #2
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800150a:	2305      	movs	r3, #5
 800150c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4619      	mov	r1, r3
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <SPIx_MspInit+0x6c>)
 8001516:	f000 fc55 	bl	8001dc4 <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3720      	adds	r7, #32
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000

0800152c <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <ACCELERO_IO_Init+0x54>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <ACCELERO_IO_Init+0x54>)
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <ACCELERO_IO_Init+0x54>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800154e:	2308      	movs	r3, #8
 8001550:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800155a:	2301      	movs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	4619      	mov	r1, r3
 8001562:	4808      	ldr	r0, [pc, #32]	@ (8001584 <ACCELERO_IO_Init+0x58>)
 8001564:	f000 fc2e 	bl	8001dc4 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001568:	2201      	movs	r2, #1
 800156a:	2108      	movs	r1, #8
 800156c:	4805      	ldr	r0, [pc, #20]	@ (8001584 <ACCELERO_IO_Init+0x58>)
 800156e:	f000 fec1 	bl	80022f4 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8001572:	f7ff ff3d 	bl	80013f0 <SPIx_Init>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40021000 	.word	0x40021000

08001588 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <ACCELERO_IO_ITConfig+0x58>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <ACCELERO_IO_ITConfig+0x58>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	6313      	str	r3, [r2, #48]	@ 0x30
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <ACCELERO_IO_ITConfig+0x58>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 80015aa:	2302      	movs	r3, #2
 80015ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80015ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015b4:	2302      	movs	r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <ACCELERO_IO_ITConfig+0x5c>)
 80015c2:	f000 fbff 	bl	8001dc4 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210f      	movs	r1, #15
 80015ca:	2007      	movs	r0, #7
 80015cc:	f000 fbc3 	bl	8001d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 80015d0:	2007      	movs	r0, #7
 80015d2:	f000 fbdc 	bl	8001d8e <HAL_NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40021000 	.word	0x40021000

080015e8 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
 80015f4:	4613      	mov	r3, r2
 80015f6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80015f8:	883b      	ldrh	r3, [r7, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d903      	bls.n	8001606 <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001604:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001606:	2200      	movs	r2, #0
 8001608:	2108      	movs	r1, #8
 800160a:	480f      	ldr	r0, [pc, #60]	@ (8001648 <ACCELERO_IO_Write+0x60>)
 800160c:	f000 fe72 	bl	80022f4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff26 	bl	8001464 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001618:	e00a      	b.n	8001630 <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff20 	bl	8001464 <SPIx_WriteRead>
    NumByteToWrite--;
 8001624:	883b      	ldrh	r3, [r7, #0]
 8001626:	3b01      	subs	r3, #1
 8001628:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3301      	adds	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001630:	883b      	ldrh	r3, [r7, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f1      	bne.n	800161a <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001636:	2201      	movs	r2, #1
 8001638:	2108      	movs	r1, #8
 800163a:	4803      	ldr	r0, [pc, #12]	@ (8001648 <ACCELERO_IO_Write+0x60>)
 800163c:	f000 fe5a 	bl	80022f4 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40021000 	.word	0x40021000

0800164c <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
 8001658:	4613      	mov	r3, r2
 800165a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800165c:	883b      	ldrh	r3, [r7, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d904      	bls.n	800166c <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001662:	78fb      	ldrb	r3, [r7, #3]
 8001664:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001668:	70fb      	strb	r3, [r7, #3]
 800166a:	e003      	b.n	8001674 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800166c:	78fb      	ldrb	r3, [r7, #3]
 800166e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001672:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001674:	2200      	movs	r2, #0
 8001676:	2108      	movs	r1, #8
 8001678:	4810      	ldr	r0, [pc, #64]	@ (80016bc <ACCELERO_IO_Read+0x70>)
 800167a:	f000 fe3b 	bl	80022f4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800167e:	78fb      	ldrb	r3, [r7, #3]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff feef 	bl	8001464 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001686:	e00c      	b.n	80016a2 <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff feeb 	bl	8001464 <SPIx_WriteRead>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001696:	883b      	ldrh	r3, [r7, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3301      	adds	r3, #1
 80016a0:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80016a2:	883b      	ldrh	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1ef      	bne.n	8001688 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 80016a8:	2201      	movs	r2, #1
 80016aa:	2108      	movs	r1, #8
 80016ac:	4803      	ldr	r0, [pc, #12]	@ (80016bc <ACCELERO_IO_Read+0x70>)
 80016ae:	f000 fe21 	bl	80022f4 <HAL_GPIO_WritePin>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40021000 	.word	0x40021000

080016c0 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80016ca:	2300      	movs	r3, #0
 80016cc:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 80016ce:	2300      	movs	r3, #0
 80016d0:	723b      	strb	r3, [r7, #8]
 80016d2:	2300      	movs	r3, #0
 80016d4:	727b      	strb	r3, [r7, #9]
 80016d6:	2300      	movs	r3, #0
 80016d8:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 80016da:	4b3c      	ldr	r3, [pc, #240]	@ (80017cc <BSP_ACCELERO_Init+0x10c>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4798      	blx	r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80016e4:	d138      	bne.n	8001758 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <BSP_ACCELERO_Init+0x110>)
 80016e8:	4a38      	ldr	r2, [pc, #224]	@ (80017cc <BSP_ACCELERO_Init+0x10c>)
 80016ea:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80016ec:	2340      	movs	r3, #64	@ 0x40
 80016ee:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80016f0:	2300      	movs	r3, #0
 80016f2:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80016f4:	2307      	movs	r3, #7
 80016f6:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001700:	7b7a      	ldrb	r2, [r7, #13]
 8001702:	7b3b      	ldrb	r3, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 8001708:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 800170a:	4313      	orrs	r3, r2
 800170c:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 800170e:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001710:	4313      	orrs	r3, r2
 8001712:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 8001714:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 8001716:	4313      	orrs	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 800171c:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <BSP_ACCELERO_Init+0x110>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	8aba      	ldrh	r2, [r7, #20]
 8001724:	4610      	mov	r0, r2
 8001726:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 8001728:	2320      	movs	r3, #32
 800172a:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 800172c:	2301      	movs	r3, #1
 800172e:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 8001730:	230c      	movs	r3, #12
 8001732:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001734:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 8001736:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001738:	4313      	orrs	r3, r2
 800173a:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 800173c:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 800173e:	4313      	orrs	r3, r2
 8001740:	b2db      	uxtb	r3, r3
 8001742:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <BSP_ACCELERO_Init+0x110>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	8aba      	ldrh	r2, [r7, #20]
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	4610      	mov	r0, r2
 8001750:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
 8001756:	e033      	b.n	80017c0 <BSP_ACCELERO_Init+0x100>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <BSP_ACCELERO_Init+0x114>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4798      	blx	r3
 800175e:	4603      	mov	r3, r0
 8001760:	2b3f      	cmp	r3, #63	@ 0x3f
 8001762:	d12b      	bne.n	80017bc <BSP_ACCELERO_Init+0xfc>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <BSP_ACCELERO_Init+0x110>)
 8001766:	4a1b      	ldr	r2, [pc, #108]	@ (80017d4 <BSP_ACCELERO_Init+0x114>)
 8001768:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_1600;//LIS3DSH_DATARATE_100;
 800176a:	2390      	movs	r3, #144	@ 0x90
 800176c:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 800176e:	2307      	movs	r3, #7
 8001770:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 8001772:	2300      	movs	r3, #0
 8001774:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8001776:	2300      	movs	r3, #0
 8001778:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_4;
 800177a:	2308      	movs	r3, #8
 800177c:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 800177e:	2300      	movs	r3, #0
 8001780:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001782:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001784:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001786:	4313      	orrs	r3, r2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800178c:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 800178e:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001790:	4313      	orrs	r3, r2
 8001792:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001794:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001796:	4313      	orrs	r3, r2
 8001798:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 800179a:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800179c:	4313      	orrs	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	8abb      	ldrh	r3, [r7, #20]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <BSP_ACCELERO_Init+0x110>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	8aba      	ldrh	r2, [r7, #20]
 80017b2:	4610      	mov	r0, r2
 80017b4:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
 80017ba:	e001      	b.n	80017c0 <BSP_ACCELERO_Init+0x100>
  }

  else
  {
    ret = ACCELERO_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20001314 	.word	0x20001314
 80017d4:	20000034 	.word	0x20000034

080017d8 <BSP_ACCELERO_ReadID>:
/**
  * @brief  Read ID of Accelerometer component.
  * @retval ID
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
  uint8_t id = 0x00;
 80017de:	2300      	movs	r3, #0
 80017e0:	71fb      	strb	r3, [r7, #7]

  if(AcceleroDrv->ReadID != NULL)
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <BSP_ACCELERO_ReadID+0x2c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <BSP_ACCELERO_ReadID+0x20>
  {
    id = AcceleroDrv->ReadID();
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <BSP_ACCELERO_ReadID+0x2c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4798      	blx	r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
  }  
  return id;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20001314 	.word	0x20001314

08001808 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 8001814:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <BSP_ACCELERO_GetXYZ+0x50>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	2b00      	cmp	r3, #0
 800181c:	d018      	beq.n	8001850 <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <BSP_ACCELERO_GetXYZ+0x50>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <BSP_ACCELERO_GetXYZ+0x50>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0b      	ldr	r2, [pc, #44]	@ (800185c <BSP_ACCELERO_GetXYZ+0x54>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10e      	bne.n	8001850 <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	425b      	negs	r3, r3
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3302      	adds	r3, #2
 800184c:	b212      	sxth	r2, r2
 800184e:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20001314 	.word	0x20001314
 800185c:	20000000 	.word	0x20000000

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <HAL_MspInit+0x4c>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001874:	6453      	str	r3, [r2, #68]	@ 0x44
 8001876:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <HAL_MspInit+0x4c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800189e:	2007      	movs	r0, #7
 80018a0:	f000 fa4e 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <NMI_Handler+0x4>

080018b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <MemManage_Handler+0x4>

080018c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001906:	f000 f907 	bl	8001b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001916:	f003 f925 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20001318 	.word	0x20001318

08001924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <OTG_FS_IRQHandler+0x10>)
 800192a:	f000 ff85 	bl	8002838 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20002444 	.word	0x20002444

08001938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <MX_TIM9_Init>:

TIM_HandleTypeDef htim9;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	463b      	mov	r3, r7
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800196e:	4b16      	ldr	r3, [pc, #88]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 8001970:	4a16      	ldr	r2, [pc, #88]	@ (80019cc <MX_TIM9_Init+0x70>)
 8001972:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001974:	4b14      	ldr	r3, [pc, #80]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b13      	ldr	r3, [pc, #76]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 8001982:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001986:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 8001996:	f003 f825 	bl	80049e4 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80019a0:	f7ff fc84 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	4619      	mov	r1, r3
 80019ae:	4806      	ldr	r0, [pc, #24]	@ (80019c8 <MX_TIM9_Init+0x6c>)
 80019b0:	f003 f9c8 	bl	8004d44 <HAL_TIM_ConfigClockSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80019ba:	f7ff fc77 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20001318 	.word	0x20001318
 80019cc:	40014000 	.word	0x40014000

080019d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <HAL_TIM_Base_MspInit+0x48>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d115      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_TIM_Base_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 80019fe:	2205      	movs	r2, #5
 8001a00:	2100      	movs	r1, #0
 8001a02:	2018      	movs	r0, #24
 8001a04:	f000 f9a7 	bl	8001d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a08:	2018      	movs	r0, #24
 8001a0a:	f000 f9c0 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40014000 	.word	0x40014000
 8001a1c:	40023800 	.word	0x40023800

08001a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a24:	f7ff ff88 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a2a:	490d      	ldr	r1, [pc, #52]	@ (8001a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a40:	4c0a      	ldr	r4, [pc, #40]	@ (8001a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f007 fc2b 	bl	80092a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a52:	f7ff fb2b 	bl	80010ac <main>
  bx  lr    
 8001a56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a60:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001a64:	08009378 	.word	0x08009378
  ldr r2, =_sbss
 8001a68:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001a6c:	20002b48 	.word	0x20002b48

08001a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a70:	e7fe      	b.n	8001a70 <ADC_IRQHandler>
	...

08001a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a78:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_Init+0x40>)
 8001a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_Init+0x40>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab4 <HAL_Init+0x40>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_Init+0x40>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <HAL_Init+0x40>)
 8001a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f000 f94f 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f000 f808 	bl	8001ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa8:	f7ff feda 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ac0:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_InitTick+0x54>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <HAL_InitTick+0x58>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 f967 	bl	8001daa <HAL_SYSTICK_Config>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00e      	b.n	8001b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b0f      	cmp	r3, #15
 8001aea:	d80a      	bhi.n	8001b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aec:	2200      	movs	r2, #0
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001af4:	f000 f92f 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_InitTick+0x5c>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000007c 	.word	0x2000007c
 8001b10:	20000084 	.word	0x20000084
 8001b14:	20000080 	.word	0x20000080

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000084 	.word	0x20000084
 8001b3c:	20001360 	.word	0x20001360

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	@ (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20001360 	.word	0x20001360

08001b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff ffee 	bl	8001b40 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b70:	d005      	beq.n	8001b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_Delay+0x44>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b7e:	bf00      	nop
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d8f7      	bhi.n	8001b80 <HAL_Delay+0x28>
  {
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000084 	.word	0x20000084

08001ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bd2:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	60d3      	str	r3, [r2, #12]
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bec:	4b04      	ldr	r3, [pc, #16]	@ (8001c00 <__NVIC_GetPriorityGrouping+0x18>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	0a1b      	lsrs	r3, r3, #8
 8001bf2:	f003 0307 	and.w	r3, r3, #7
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	db0b      	blt.n	8001c2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	f003 021f 	and.w	r2, r3, #31
 8001c1c:	4907      	ldr	r1, [pc, #28]	@ (8001c3c <__NVIC_EnableIRQ+0x38>)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	2001      	movs	r0, #1
 8001c26:	fa00 f202 	lsl.w	r2, r0, r2
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	@ (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	@ (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	@ 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	@ 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	@ (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff29 	bl	8001ba0 <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff3e 	bl	8001be8 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff31 	bl	8001c04 <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ffa2 	bl	8001cfc <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	e16b      	b.n	80020b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	f040 815a 	bne.w	80020b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d005      	beq.n	8001e16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d130      	bne.n	8001e78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 0201 	and.w	r2, r3, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d017      	beq.n	8001eb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d123      	bne.n	8001f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	69b9      	ldr	r1, [r7, #24]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80b4 	beq.w	80020b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b60      	ldr	r3, [pc, #384]	@ (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	4a5f      	ldr	r2, [pc, #380]	@ (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80020d0 <HAL_GPIO_Init+0x30c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f66:	4a5b      	ldr	r2, [pc, #364]	@ (80020d4 <HAL_GPIO_Init+0x310>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a52      	ldr	r2, [pc, #328]	@ (80020d8 <HAL_GPIO_Init+0x314>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d02b      	beq.n	8001fea <HAL_GPIO_Init+0x226>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a51      	ldr	r2, [pc, #324]	@ (80020dc <HAL_GPIO_Init+0x318>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d025      	beq.n	8001fe6 <HAL_GPIO_Init+0x222>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a50      	ldr	r2, [pc, #320]	@ (80020e0 <HAL_GPIO_Init+0x31c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_GPIO_Init+0x21e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80020e4 <HAL_GPIO_Init+0x320>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d019      	beq.n	8001fde <HAL_GPIO_Init+0x21a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4e      	ldr	r2, [pc, #312]	@ (80020e8 <HAL_GPIO_Init+0x324>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <HAL_GPIO_Init+0x216>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80020ec <HAL_GPIO_Init+0x328>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00d      	beq.n	8001fd6 <HAL_GPIO_Init+0x212>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	@ (80020f0 <HAL_GPIO_Init+0x32c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d007      	beq.n	8001fd2 <HAL_GPIO_Init+0x20e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80020f4 <HAL_GPIO_Init+0x330>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d101      	bne.n	8001fce <HAL_GPIO_Init+0x20a>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e00e      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fce:	2308      	movs	r3, #8
 8001fd0:	e00c      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e00a      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e008      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fda:	2304      	movs	r3, #4
 8001fdc:	e006      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e004      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e002      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_GPIO_Init+0x228>
 8001fea:	2300      	movs	r3, #0
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	0092      	lsls	r2, r2, #2
 8001ff4:	4093      	lsls	r3, r2
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ffc:	4935      	ldr	r1, [pc, #212]	@ (80020d4 <HAL_GPIO_Init+0x310>)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	3302      	adds	r3, #2
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800200a:	4b3b      	ldr	r3, [pc, #236]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800202e:	4a32      	ldr	r2, [pc, #200]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002034:	4b30      	ldr	r3, [pc, #192]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002058:	4a27      	ldr	r2, [pc, #156]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800205e:	4b26      	ldr	r3, [pc, #152]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002082:	4a1d      	ldr	r2, [pc, #116]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ac:	4a12      	ldr	r2, [pc, #72]	@ (80020f8 <HAL_GPIO_Init+0x334>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	f67f ae90 	bls.w	8001de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40013800 	.word	0x40013800
 80020d8:	40020000 	.word	0x40020000
 80020dc:	40020400 	.word	0x40020400
 80020e0:	40020800 	.word	0x40020800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40021400 	.word	0x40021400
 80020f0:	40021800 	.word	0x40021800
 80020f4:	40021c00 	.word	0x40021c00
 80020f8:	40013c00 	.word	0x40013c00

080020fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e0cd      	b.n	80022b4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	f040 80bd 	bne.w	80022ae <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002134:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_GPIO_DeInit+0x1d0>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a5d      	ldr	r2, [pc, #372]	@ (80022d0 <HAL_GPIO_DeInit+0x1d4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_DeInit+0xba>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a5c      	ldr	r2, [pc, #368]	@ (80022d4 <HAL_GPIO_DeInit+0x1d8>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_DeInit+0xb6>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <HAL_GPIO_DeInit+0x1dc>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_DeInit+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a5a      	ldr	r2, [pc, #360]	@ (80022dc <HAL_GPIO_DeInit+0x1e0>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_DeInit+0xae>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a59      	ldr	r2, [pc, #356]	@ (80022e0 <HAL_GPIO_DeInit+0x1e4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_DeInit+0xaa>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	@ (80022e4 <HAL_GPIO_DeInit+0x1e8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_DeInit+0xa6>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a57      	ldr	r2, [pc, #348]	@ (80022e8 <HAL_GPIO_DeInit+0x1ec>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_DeInit+0xa2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a56      	ldr	r2, [pc, #344]	@ (80022ec <HAL_GPIO_DeInit+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_DeInit+0x9e>
 8002196:	2307      	movs	r3, #7
 8002198:	e00e      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 800219a:	2308      	movs	r3, #8
 800219c:	e00c      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00a      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 80021a2:	2305      	movs	r3, #5
 80021a4:	e008      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 80021a6:	2304      	movs	r3, #4
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 80021aa:	2303      	movs	r3, #3
 80021ac:	e004      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 80021b2:	2301      	movs	r3, #1
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_DeInit+0xbc>
 80021b6:	2300      	movs	r3, #0
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	f002 0203 	and.w	r2, r2, #3
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	4093      	lsls	r3, r2
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d132      	bne.n	800222e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021c8:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4947      	ldr	r1, [pc, #284]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021d6:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4944      	ldr	r1, [pc, #272]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021e4:	4b42      	ldr	r3, [pc, #264]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	4940      	ldr	r1, [pc, #256]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80021f2:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	493d      	ldr	r1, [pc, #244]	@ (80022f0 <HAL_GPIO_DeInit+0x1f4>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002210:	4a2e      	ldr	r2, [pc, #184]	@ (80022cc <HAL_GPIO_DeInit+0x1d0>)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	43da      	mvns	r2, r3
 8002220:	482a      	ldr	r0, [pc, #168]	@ (80022cc <HAL_GPIO_DeInit+0x1d0>)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	400a      	ands	r2, r1
 8002228:	3302      	adds	r3, #2
 800222a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2103      	movs	r1, #3
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	401a      	ands	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	08d2      	lsrs	r2, r2, #3
 8002264:	4019      	ands	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2103      	movs	r1, #3
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	2103      	movs	r1, #3
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43db      	mvns	r3, r3
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b0f      	cmp	r3, #15
 80022b8:	f67f af2e 	bls.w	8002118 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800
 80022ec:	40021c00 	.word	0x40021c00
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e12b      	b.n	8002592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fe26 	bl	8000fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2224      	movs	r2, #36	@ 0x24
 8002358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800238a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800238c:	f001 ffd2 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a81      	ldr	r2, [pc, #516]	@ (800259c <HAL_I2C_Init+0x274>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d807      	bhi.n	80023ac <HAL_I2C_Init+0x84>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a80      	ldr	r2, [pc, #512]	@ (80025a0 <HAL_I2C_Init+0x278>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	bf94      	ite	ls
 80023a4:	2301      	movls	r3, #1
 80023a6:	2300      	movhi	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e006      	b.n	80023ba <HAL_I2C_Init+0x92>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4a7d      	ldr	r2, [pc, #500]	@ (80025a4 <HAL_I2C_Init+0x27c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	bf94      	ite	ls
 80023b4:	2301      	movls	r3, #1
 80023b6:	2300      	movhi	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0e7      	b.n	8002592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a78      	ldr	r2, [pc, #480]	@ (80025a8 <HAL_I2C_Init+0x280>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_I2C_Init+0x274>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d802      	bhi.n	80023fc <HAL_I2C_Init+0xd4>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	e009      	b.n	8002410 <HAL_I2C_Init+0xe8>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a69      	ldr	r2, [pc, #420]	@ (80025ac <HAL_I2C_Init+0x284>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	3301      	adds	r3, #1
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	430b      	orrs	r3, r1
 8002416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	495c      	ldr	r1, [pc, #368]	@ (800259c <HAL_I2C_Init+0x274>)
 800242c:	428b      	cmp	r3, r1
 800242e:	d819      	bhi.n	8002464 <HAL_I2C_Init+0x13c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e59      	subs	r1, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	fbb1 f3f3 	udiv	r3, r1, r3
 800243e:	1c59      	adds	r1, r3, #1
 8002440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002444:	400b      	ands	r3, r1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_I2C_Init+0x138>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e59      	subs	r1, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	fbb1 f3f3 	udiv	r3, r1, r3
 8002458:	3301      	adds	r3, #1
 800245a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800245e:	e051      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002460:	2304      	movs	r3, #4
 8002462:	e04f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d111      	bne.n	8002490 <HAL_I2C_Init+0x168>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1e58      	subs	r0, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	440b      	add	r3, r1
 800247a:	fbb0 f3f3 	udiv	r3, r0, r3
 800247e:	3301      	adds	r3, #1
 8002480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	e012      	b.n	80024b6 <HAL_I2C_Init+0x18e>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1e58      	subs	r0, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	0099      	lsls	r1, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x196>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e022      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <HAL_I2C_Init+0x1bc>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1e58      	subs	r0, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6859      	ldr	r1, [r3, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d8:	3301      	adds	r3, #1
 80024da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	e00f      	b.n	8002504 <HAL_I2C_Init+0x1dc>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	1e58      	subs	r0, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	0099      	lsls	r1, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	6809      	ldr	r1, [r1, #0]
 8002508:	4313      	orrs	r3, r2
 800250a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6911      	ldr	r1, [r2, #16]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	4311      	orrs	r1, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	001e847f 	.word	0x001e847f
 80025a4:	003d08ff 	.word	0x003d08ff
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	10624dd3 	.word	0x10624dd3

080025b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e101      	b.n	80027c6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d106      	bne.n	80025e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f006 fb39 	bl	8008c54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2203      	movs	r2, #3
 80025e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025f0:	d102      	bne.n	80025f8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 ff02 	bl	8005406 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7c1a      	ldrb	r2, [r3, #16]
 800260a:	f88d 2000 	strb.w	r2, [sp]
 800260e:	3304      	adds	r3, #4
 8002610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002612:	f002 fde1 	bl	80051d8 <USB_CoreInit>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0ce      	b.n	80027c6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f002 fefa 	bl	8005428 <USB_SetCurrentMode>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0bf      	b.n	80027c6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002646:	2300      	movs	r3, #0
 8002648:	73fb      	strb	r3, [r7, #15]
 800264a:	e04a      	b.n	80026e2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3315      	adds	r3, #21
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3314      	adds	r3, #20
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	b298      	uxth	r0, r3
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4413      	add	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	332e      	adds	r3, #46	@ 0x2e
 8002688:	4602      	mov	r2, r0
 800268a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3318      	adds	r3, #24
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	331c      	adds	r3, #28
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3320      	adds	r3, #32
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026c8:	7bfa      	ldrb	r2, [r7, #15]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3324      	adds	r3, #36	@ 0x24
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	3301      	adds	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	791b      	ldrb	r3, [r3, #4]
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d3af      	bcc.n	800264c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ec:	2300      	movs	r3, #0
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	e044      	b.n	800277c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	791b      	ldrb	r3, [r3, #4]
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	429a      	cmp	r2, r3
 8002784:	d3b5      	bcc.n	80026f2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7c1a      	ldrb	r2, [r3, #16]
 800278e:	f88d 2000 	strb.w	r2, [sp]
 8002792:	3304      	adds	r3, #4
 8002794:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002796:	f002 fe93 	bl	80054c0 <USB_DevInit>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e00c      	b.n	80027c6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 fedd 	bl	800657e <USB_DevDisconnect>

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_PCD_Start+0x1c>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e022      	b.n	8002830 <HAL_PCD_Start+0x62>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002802:	2b01      	cmp	r3, #1
 8002804:	d105      	bne.n	8002812 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f002 fde4 	bl	80053e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f003 fe8b 	bl	800653c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b08d      	sub	sp, #52	@ 0x34
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f003 ff49 	bl	80066e6 <USB_GetMode>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 848c 	bne.w	8003174 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f003 fead 	bl	80065c0 <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8482 	beq.w	8003172 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fe9a 	bl	80065c0 <USB_ReadInterrupts>
 800288c:	4603      	mov	r3, r0
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d107      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 0202 	and.w	r2, r2, #2
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fe88 	bl	80065c0 <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d161      	bne.n	800297e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0210 	bic.w	r2, r2, #16
 80028c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f003 020f 	and.w	r2, r3, #15
 80028d6:	4613      	mov	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	0c5b      	lsrs	r3, r3, #17
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d124      	bne.n	8002940 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d035      	beq.n	800296e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800290c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002910:	b29b      	uxth	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	6a38      	ldr	r0, [r7, #32]
 8002916:	f003 fcbf 	bl	8006298 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002926:	441a      	add	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002938:	441a      	add	r2, r3
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	e016      	b.n	800296e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	0c5b      	lsrs	r3, r3, #17
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	2b06      	cmp	r3, #6
 800294a:	d110      	bne.n	800296e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002952:	2208      	movs	r2, #8
 8002954:	4619      	mov	r1, r3
 8002956:	6a38      	ldr	r0, [r7, #32]
 8002958:	f003 fc9e 	bl	8006298 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002968:	441a      	add	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699a      	ldr	r2, [r3, #24]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0210 	orr.w	r2, r2, #16
 800297c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fe1c 	bl	80065c0 <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800298e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002992:	f040 80a7 	bne.w	8002ae4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fe21 	bl	80065e6 <USB_ReadDevAllOutEpInterrupt>
 80029a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029a6:	e099      	b.n	8002adc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 808e 	beq.w	8002ad0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	4611      	mov	r1, r2
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fe45 	bl	800664e <USB_ReadDevOutEPInterrupt>
 80029c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00c      	beq.n	80029ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029dc:	461a      	mov	r2, r3
 80029de:	2301      	movs	r3, #1
 80029e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80029e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fea3 	bl	8003730 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a00:	461a      	mov	r2, r3
 8002a02:	2308      	movs	r3, #8
 8002a04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 ff79 	bl	8003900 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a24:	461a      	mov	r2, r3
 8002a26:	2310      	movs	r3, #16
 8002a28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d030      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3c:	2b80      	cmp	r3, #128	@ 0x80
 8002a3e:	d109      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d108      	bne.n	8002a84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f006 f9fc 	bl	8008e7c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a90:	461a      	mov	r2, r3
 8002a92:	2302      	movs	r3, #2
 8002a94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aac:	461a      	mov	r2, r3
 8002aae:	2320      	movs	r3, #32
 8002ab0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ace:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f47f af62 	bne.w	80029a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 fd69 	bl	80065c0 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002af4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002af8:	f040 80db 	bne.w	8002cb2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 fd8a 	bl	800661a <USB_ReadDevAllInEpInterrupt>
 8002b06:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b0c:	e0cd      	b.n	8002caa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80c2 	beq.w	8002c9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f003 fdb0 	bl	800668a <USB_ReadDevInEPInterrupt>
 8002b2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d057      	beq.n	8002be6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69f9      	ldr	r1, [r7, #28]
 8002b52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b56:	4013      	ands	r3, r2
 8002b58:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b66:	461a      	mov	r2, r3
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	799b      	ldrb	r3, [r3, #6]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d132      	bne.n	8002bda <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3320      	adds	r3, #32
 8002b84:	6819      	ldr	r1, [r3, #0]
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4403      	add	r3, r0
 8002b94:	331c      	adds	r3, #28
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4419      	add	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4403      	add	r3, r0
 8002ba8:	3320      	adds	r3, #32
 8002baa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d113      	bne.n	8002bda <HAL_PCD_IRQHandler+0x3a2>
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3324      	adds	r3, #36	@ 0x24
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	f003 fdb7 	bl	8006748 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f006 f8c6 	bl	8008d72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2308      	movs	r3, #8
 8002c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2310      	movs	r3, #16
 8002c1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c34:	461a      	mov	r2, r3
 8002c36:	2340      	movs	r3, #64	@ 0x40
 8002c38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d023      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c46:	6a38      	ldr	r0, [r7, #32]
 8002c48:	f002 fd9e 	bl	8005788 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3310      	adds	r3, #16
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	78db      	ldrb	r3, [r3, #3]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d108      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4619      	mov	r1, r3
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f006 f913 	bl	8008ea0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c86:	461a      	mov	r2, r3
 8002c88:	2302      	movs	r3, #2
 8002c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fcbd 	bl	8003618 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f af2e 	bne.w	8002b0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fc82 	bl	80065c0 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cc6:	d122      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 fea3 	bl	8003a3c <HAL_PCDEx_LPM_Callback>
 8002cf6:	e002      	b.n	8002cfe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f006 f8b1 	bl	8008e60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 fc54 	bl	80065c0 <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d22:	d112      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f006 f86d 	bl	8008e14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d48:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f003 fc36 	bl	80065c0 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d5e:	f040 80b7 	bne.w	8002ed0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2110      	movs	r1, #16
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f002 fd03 	bl	8005788 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d82:	2300      	movs	r3, #0
 8002d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d86:	e046      	b.n	8002e16 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d94:	461a      	mov	r2, r3
 8002d96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9e:	015a      	lsls	r2, r3, #5
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	4413      	add	r3, r2
 8002da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dac:	0151      	lsls	r1, r2, #5
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	440a      	add	r2, r1
 8002db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002db6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002de0:	0151      	lsls	r1, r2, #5
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	440a      	add	r2, r1
 8002de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002dea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e00:	0151      	lsls	r1, r2, #5
 8002e02:	69fa      	ldr	r2, [r7, #28]
 8002e04:	440a      	add	r2, r1
 8002e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e12:	3301      	adds	r3, #1
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	791b      	ldrb	r3, [r3, #4]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d3b2      	bcc.n	8002d88 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e30:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7bdb      	ldrb	r3, [r3, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d016      	beq.n	8002e6c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e4e:	f043 030b 	orr.w	r3, r3, #11
 8002e52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e64:	f043 030b 	orr.w	r3, r3, #11
 8002e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6a:	e015      	b.n	8002e98 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	69fa      	ldr	r2, [r7, #28]
 8002e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e7e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002e82:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e92:	f043 030b 	orr.w	r3, r3, #11
 8002e96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002eaa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f003 fc44 	bl	8006748 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fb73 	bl	80065c0 <USB_ReadInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ee4:	d123      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f003 fc09 	bl	8006702 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fcc0 	bl	800587a <USB_GetDevSpeed>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681c      	ldr	r4, [r3, #0]
 8002f06:	f001 fa09 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8002f0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f10:	461a      	mov	r2, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f002 f9c4 	bl	80052a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f005 ff52 	bl	8008dc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695a      	ldr	r2, [r3, #20]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fb44 	bl	80065c0 <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d10a      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f005 ff2f 	bl	8008da6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f002 0208 	and.w	r2, r2, #8
 8002f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f003 fb2f 	bl	80065c0 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f68:	2b80      	cmp	r3, #128	@ 0x80
 8002f6a:	d123      	bne.n	8002fb4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7c:	e014      	b.n	8002fa8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fb0a 	bl	80035b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	791b      	ldrb	r3, [r3, #4]
 8002fac:	461a      	mov	r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d3e4      	bcc.n	8002f7e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fb01 	bl	80065c0 <USB_ReadInterrupts>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc8:	d13c      	bne.n	8003044 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fca:	2301      	movs	r3, #1
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fce:	e02b      	b.n	8003028 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3318      	adds	r3, #24
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d115      	bne.n	8003022 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ff6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da12      	bge.n	8003022 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3317      	adds	r3, #23
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 faca 	bl	80035b6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	@ 0x24
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	791b      	ldrb	r3, [r3, #4]
 800302c:	461a      	mov	r2, r3
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	4293      	cmp	r3, r2
 8003032:	d3cd      	bcc.n	8002fd0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fab9 	bl	80065c0 <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003058:	d156      	bne.n	8003108 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305a:	2301      	movs	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
 800305e:	e045      	b.n	80030ec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d12e      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003088:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	da2b      	bge.n	80030e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800309a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800309e:	429a      	cmp	r2, r3
 80030a0:	d121      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030e2:	6053      	str	r3, [r2, #4]
            break;
 80030e4:	e008      	b.n	80030f8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	791b      	ldrb	r3, [r3, #4]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d3b3      	bcc.n	8003060 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f003 fa57 	bl	80065c0 <USB_ReadInterrupts>
 8003112:	4603      	mov	r3, r0
 8003114:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311c:	d10a      	bne.n	8003134 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f005 fed0 	bl	8008ec4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fa41 	bl	80065c0 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d115      	bne.n	8003174 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f005 fec0 	bl	8008ee0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
 8003170:	e000      	b.n	8003174 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003172:	bf00      	nop
    }
  }
}
 8003174:	3734      	adds	r7, #52	@ 0x34
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_PCD_SetAddress+0x1a>
 8003190:	2302      	movs	r3, #2
 8003192:	e012      	b.n	80031ba <HAL_PCD_SetAddress+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 f9a0 	bl	80064f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	461a      	mov	r2, r3
 80031d0:	4603      	mov	r3, r0
 80031d2:	70fb      	strb	r3, [r7, #3]
 80031d4:	460b      	mov	r3, r1
 80031d6:	803b      	strh	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da0f      	bge.n	8003208 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3310      	adds	r3, #16
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	705a      	strb	r2, [r3, #1]
 8003206:	e00f      	b.n	8003228 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003234:	883b      	ldrh	r3, [r7, #0]
 8003236:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	78ba      	ldrb	r2, [r7, #2]
 8003242:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d004      	beq.n	8003256 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003256:	78bb      	ldrb	r3, [r7, #2]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d102      	bne.n	8003262 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_EP_Open+0xae>
 800326c:	2302      	movs	r3, #2
 800326e:	e00e      	b.n	800328e <HAL_PCD_EP_Open+0xcc>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f002 fb20 	bl	80058c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800328c:	7afb      	ldrb	r3, [r7, #11]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	460b      	mov	r3, r1
 80032a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da0f      	bge.n	80032ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	3310      	adds	r3, #16
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	3304      	adds	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	705a      	strb	r2, [r3, #1]
 80032c8:	e00f      	b.n	80032ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 020f 	and.w	r2, r3, #15
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_EP_Close+0x6e>
 8003300:	2302      	movs	r3, #2
 8003302:	e00e      	b.n	8003322 <HAL_PCD_EP_Close+0x8c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fb5e 	bl	80059d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	460b      	mov	r3, r1
 8003338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2200      	movs	r2, #0
 8003364:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2200      	movs	r2, #0
 800336a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336c:	7afb      	ldrb	r3, [r7, #11]
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	b2da      	uxtb	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	799b      	ldrb	r3, [r3, #6]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	799b      	ldrb	r3, [r3, #6]
 800338e:	461a      	mov	r2, r3
 8003390:	6979      	ldr	r1, [r7, #20]
 8003392:	f002 fbfb 	bl	8005b8c <USB_EPStartXfer>

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 020f 	and.w	r2, r3, #15
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	460b      	mov	r3, r1
 80033de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e0:	7afb      	ldrb	r3, [r7, #11]
 80033e2:	f003 020f 	and.w	r2, r3, #15
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	3310      	adds	r3, #16
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	3304      	adds	r3, #4
 80033f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2201      	movs	r2, #1
 800340e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	b2da      	uxtb	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	799b      	ldrb	r3, [r3, #6]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	799b      	ldrb	r3, [r3, #6]
 8003432:	461a      	mov	r2, r3
 8003434:	6979      	ldr	r1, [r7, #20]
 8003436:	f002 fba9 	bl	8005b8c <USB_EPStartXfer>

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	7912      	ldrb	r2, [r2, #4]
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e04f      	b.n	8003502 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003466:	2b00      	cmp	r3, #0
 8003468:	da0f      	bge.n	800348a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3310      	adds	r3, #16
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	705a      	strb	r2, [r3, #1]
 8003488:	e00d      	b.n	80034a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	3304      	adds	r3, #4
 800349e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_PCD_EP_SetStall+0x82>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e01d      	b.n	8003502 <HAL_PCD_EP_SetStall+0xbe>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 ff37 	bl	8006348 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7999      	ldrb	r1, [r3, #6]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034f2:	461a      	mov	r2, r3
 80034f4:	f003 f928 	bl	8006748 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	7912      	ldrb	r2, [r2, #4]
 8003520:	4293      	cmp	r3, r2
 8003522:	d901      	bls.n	8003528 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e042      	b.n	80035ae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800352c:	2b00      	cmp	r3, #0
 800352e:	da0f      	bge.n	8003550 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3310      	adds	r3, #16
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	3304      	adds	r3, #4
 8003546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	705a      	strb	r2, [r3, #1]
 800354e:	e00f      	b.n	8003570 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	f003 020f 	and.w	r2, r3, #15
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	b2da      	uxtb	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_PCD_EP_ClrStall+0x86>
 800358c:	2302      	movs	r3, #2
 800358e:	e00e      	b.n	80035ae <HAL_PCD_EP_ClrStall+0xa4>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	4618      	mov	r0, r3
 80035a0:	f002 ff40 	bl	8006424 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da0c      	bge.n	80035e4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 020f 	and.w	r2, r3, #15
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	3310      	adds	r3, #16
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	e00c      	b.n	80035fe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	f003 020f 	and.w	r2, r3, #15
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	3304      	adds	r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68f9      	ldr	r1, [r7, #12]
 8003604:	4618      	mov	r0, r3
 8003606:	f002 fd5f 	bl	80060c8 <USB_EPStopXfer>
 800360a:	4603      	mov	r3, r0
 800360c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800360e:	7afb      	ldrb	r3, [r7, #11]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08a      	sub	sp, #40	@ 0x28
 800361c:	af02      	add	r7, sp, #8
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	3310      	adds	r3, #16
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	429a      	cmp	r2, r3
 800364a:	d901      	bls.n	8003650 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e06b      	b.n	8003728 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	429a      	cmp	r2, r3
 8003664:	d902      	bls.n	800366c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	3303      	adds	r3, #3
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003674:	e02a      	b.n	80036cc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	429a      	cmp	r2, r3
 800368a:	d902      	bls.n	8003692 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3303      	adds	r3, #3
 8003696:	089b      	lsrs	r3, r3, #2
 8003698:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68d9      	ldr	r1, [r3, #12]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4603      	mov	r3, r0
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f002 fdb4 	bl	800621c <USB_WritePacket>

    ep->xfer_buff  += len;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	441a      	add	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	441a      	add	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d809      	bhi.n	80036f6 <PCD_WriteEmptyTxFifo+0xde>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d203      	bcs.n	80036f6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1bf      	bne.n	8003676 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d811      	bhi.n	8003726 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2201      	movs	r2, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	43db      	mvns	r3, r3
 800371c:	6939      	ldr	r1, [r7, #16]
 800371e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003722:	4013      	ands	r3, r2
 8003724:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	333c      	adds	r3, #60	@ 0x3c
 8003748:	3304      	adds	r3, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	799b      	ldrb	r3, [r3, #6]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d17b      	bne.n	800385e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d015      	beq.n	800379c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	4a61      	ldr	r2, [pc, #388]	@ (80038f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	f240 80b9 	bls.w	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80b3 	beq.w	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003798:	6093      	str	r3, [r2, #8]
 800379a:	e0a7      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b2:	461a      	mov	r2, r3
 80037b4:	2320      	movs	r3, #32
 80037b6:	6093      	str	r3, [r2, #8]
 80037b8:	e098      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f040 8093 	bne.w	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	4a4b      	ldr	r2, [pc, #300]	@ (80038f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d90f      	bls.n	80037ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e4:	461a      	mov	r2, r3
 80037e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ea:	6093      	str	r3, [r2, #8]
 80037ec:	e07e      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	3304      	adds	r3, #4
 8003802:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	0159      	lsls	r1, r3, #5
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	440b      	add	r3, r1
 8003810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	1ad2      	subs	r2, r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d114      	bne.n	8003850 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003838:	461a      	mov	r2, r3
 800383a:	2101      	movs	r1, #1
 800383c:	f002 ff84 	bl	8006748 <USB_EP0_OutStart>
 8003840:	e006      	b.n	8003850 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	441a      	add	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f005 fa70 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
 800385c:	e046      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a26      	ldr	r2, [pc, #152]	@ (80038fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d124      	bne.n	80038b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387c:	461a      	mov	r2, r3
 800387e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003882:	6093      	str	r3, [r2, #8]
 8003884:	e032      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389c:	461a      	mov	r2, r3
 800389e:	2320      	movs	r3, #32
 80038a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	4619      	mov	r1, r3
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f005 fa47 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
 80038ae:	e01d      	b.n	80038ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d114      	bne.n	80038e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	4613      	mov	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d108      	bne.n	80038e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038d8:	461a      	mov	r2, r3
 80038da:	2100      	movs	r1, #0
 80038dc:	f002 ff34 	bl	8006748 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f005 fa28 	bl	8008d3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	4f54300a 	.word	0x4f54300a
 80038fc:	4f54310a 	.word	0x4f54310a

08003900 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	333c      	adds	r3, #60	@ 0x3c
 8003918:	3304      	adds	r3, #4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <PCD_EP_OutSetupPacket_int+0x88>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d90e      	bls.n	8003954 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800393c:	2b00      	cmp	r3, #0
 800393e:	d009      	beq.n	8003954 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003952:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f005 f9df 	bl	8008d18 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <PCD_EP_OutSetupPacket_int+0x88>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d90c      	bls.n	800397c <PCD_EP_OutSetupPacket_int+0x7c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	799b      	ldrb	r3, [r3, #6]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d108      	bne.n	800397c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003974:	461a      	mov	r2, r3
 8003976:	2101      	movs	r1, #1
 8003978:	f002 fee6 	bl	8006748 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	4f54300a 	.word	0x4f54300a

0800398c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
 8003998:	4613      	mov	r3, r2
 800399a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039aa:	883b      	ldrh	r3, [r7, #0]
 80039ac:	0419      	lsls	r1, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039b8:	e028      	b.n	8003a0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	0c1b      	lsrs	r3, r3, #16
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	73fb      	strb	r3, [r7, #15]
 80039cc:	e00d      	b.n	80039ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
 80039d4:	3340      	adds	r3, #64	@ 0x40
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	4413      	add	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	3301      	adds	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
 80039ea:	7bfa      	ldrb	r2, [r7, #15]
 80039ec:	78fb      	ldrb	r3, [r7, #3]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3ec      	bcc.n	80039ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039f4:	883b      	ldrh	r3, [r7, #0]
 80039f6:	0418      	lsls	r0, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6819      	ldr	r1, [r3, #0]
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	4302      	orrs	r2, r0
 8003a04:	3340      	adds	r3, #64	@ 0x40
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e267      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d075      	beq.n	8003b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a72:	4b88      	ldr	r3, [pc, #544]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d00c      	beq.n	8003a98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a7e:	4b85      	ldr	r3, [pc, #532]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d112      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8a:	4b82      	ldr	r3, [pc, #520]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a96:	d10b      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	4b7e      	ldr	r3, [pc, #504]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d05b      	beq.n	8003b5c <HAL_RCC_OscConfig+0x108>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d157      	bne.n	8003b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e242      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x74>
 8003aba:	4b76      	ldr	r3, [pc, #472]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a75      	ldr	r2, [pc, #468]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e01d      	b.n	8003b04 <HAL_RCC_OscConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x98>
 8003ad2:	4b70      	ldr	r3, [pc, #448]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6f      	ldr	r2, [pc, #444]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b6d      	ldr	r3, [pc, #436]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6c      	ldr	r2, [pc, #432]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e00b      	b.n	8003b04 <HAL_RCC_OscConfig+0xb0>
 8003aec:	4b69      	ldr	r3, [pc, #420]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a68      	ldr	r2, [pc, #416]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	4b66      	ldr	r3, [pc, #408]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a65      	ldr	r2, [pc, #404]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003afe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f818 	bl	8001b40 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe f814 	bl	8001b40 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	@ 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e207      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b5b      	ldr	r3, [pc, #364]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0xc0>
 8003b32:	e014      	b.n	8003b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe f804 	bl	8001b40 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b3c:	f7fe f800 	bl	8001b40 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	@ 0x64
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e1f3      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	4b51      	ldr	r3, [pc, #324]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0xe8>
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d063      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00b      	beq.n	8003b8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b76:	4b47      	ldr	r3, [pc, #284]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d11c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b82:	4b44      	ldr	r3, [pc, #272]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d116      	bne.n	8003bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b8e:	4b41      	ldr	r3, [pc, #260]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x152>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e1c7      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4937      	ldr	r1, [pc, #220]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	e03a      	b.n	8003c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d020      	beq.n	8003c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc4:	4b34      	ldr	r3, [pc, #208]	@ (8003c98 <HAL_RCC_OscConfig+0x244>)
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd ffb9 	bl	8001b40 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd2:	f7fd ffb5 	bl	8001b40 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e1a8      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0f0      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf0:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	4925      	ldr	r1, [pc, #148]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]
 8003c04:	e015      	b.n	8003c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c06:	4b24      	ldr	r3, [pc, #144]	@ (8003c98 <HAL_RCC_OscConfig+0x244>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd ff98 	bl	8001b40 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fd ff94 	bl	8001b40 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e187      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	4b1b      	ldr	r3, [pc, #108]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d036      	beq.n	8003cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c46:	4b15      	ldr	r3, [pc, #84]	@ (8003c9c <HAL_RCC_OscConfig+0x248>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd ff78 	bl	8001b40 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c54:	f7fd ff74 	bl	8001b40 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e167      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <HAL_RCC_OscConfig+0x240>)
 8003c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x200>
 8003c72:	e01b      	b.n	8003cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c74:	4b09      	ldr	r3, [pc, #36]	@ (8003c9c <HAL_RCC_OscConfig+0x248>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd ff61 	bl	8001b40 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	e00e      	b.n	8003ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c82:	f7fd ff5d 	bl	8001b40 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d907      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e150      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	42470000 	.word	0x42470000
 8003c9c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca0:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1ea      	bne.n	8003c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8097 	beq.w	8003de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cbe:	4b81      	ldr	r3, [pc, #516]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10f      	bne.n	8003cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cda:	4b7a      	ldr	r3, [pc, #488]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	60bb      	str	r3, [r7, #8]
 8003ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cea:	4b77      	ldr	r3, [pc, #476]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d118      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cf6:	4b74      	ldr	r3, [pc, #464]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a73      	ldr	r2, [pc, #460]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d02:	f7fd ff1d 	bl	8001b40 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d0a:	f7fd ff19 	bl	8001b40 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e10c      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec8 <HAL_RCC_OscConfig+0x474>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2ea>
 8003d30:	4b64      	ldr	r3, [pc, #400]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d34:	4a63      	ldr	r2, [pc, #396]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3c:	e01c      	b.n	8003d78 <HAL_RCC_OscConfig+0x324>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x30c>
 8003d46:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d52:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d56:	4a5b      	ldr	r2, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0x324>
 8003d60:	4b58      	ldr	r3, [pc, #352]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d64:	4a57      	ldr	r2, [pc, #348]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f023 0301 	bic.w	r3, r3, #1
 8003d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d6c:	4b55      	ldr	r3, [pc, #340]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a54      	ldr	r2, [pc, #336]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003d72:	f023 0304 	bic.w	r3, r3, #4
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd fede 	bl	8001b40 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d88:	f7fd feda 	bl	8001b40 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0cb      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9e:	4b49      	ldr	r3, [pc, #292]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ee      	beq.n	8003d88 <HAL_RCC_OscConfig+0x334>
 8003daa:	e014      	b.n	8003dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fd fec8 	bl	8001b40 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db2:	e00a      	b.n	8003dca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db4:	f7fd fec4 	bl	8001b40 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0b5      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dca:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ee      	bne.n	8003db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ddc:	4b39      	ldr	r3, [pc, #228]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	4a38      	ldr	r2, [pc, #224]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80a1 	beq.w	8003f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df2:	4b34      	ldr	r3, [pc, #208]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d05c      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d141      	bne.n	8003e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e06:	4b31      	ldr	r3, [pc, #196]	@ (8003ecc <HAL_RCC_OscConfig+0x478>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd fe98 	bl	8001b40 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fd fe94 	bl	8001b40 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e087      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e26:	4b27      	ldr	r3, [pc, #156]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	061b      	lsls	r3, r3, #24
 8003e56:	491b      	ldr	r1, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_RCC_OscConfig+0x478>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e62:	f7fd fe6d 	bl	8001b40 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e6a:	f7fd fe69 	bl	8001b40 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e05c      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x416>
 8003e88:	e054      	b.n	8003f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <HAL_RCC_OscConfig+0x478>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fd fe56 	bl	8001b40 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fd fe52 	bl	8001b40 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e045      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_RCC_OscConfig+0x470>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x444>
 8003eb6:	e03d      	b.n	8003f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d107      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e038      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f40 <HAL_RCC_OscConfig+0x4ec>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d028      	beq.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d121      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d11a      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d111      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0cc      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b68      	ldr	r3, [pc, #416]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d90c      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b63      	ldr	r3, [pc, #396]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0b8      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d020      	beq.n	8003fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a58      	ldr	r2, [pc, #352]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fb0:	4b53      	ldr	r3, [pc, #332]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b50      	ldr	r3, [pc, #320]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	494d      	ldr	r1, [pc, #308]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d044      	beq.n	8004064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fe2:	4b47      	ldr	r3, [pc, #284]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d119      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e07f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d107      	bne.n	8004012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004002:	4b3f      	ldr	r3, [pc, #252]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004012:	4b3b      	ldr	r3, [pc, #236]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e067      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004022:	4b37      	ldr	r3, [pc, #220]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	4934      	ldr	r1, [pc, #208]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	4313      	orrs	r3, r2
 8004032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004034:	f7fd fd84 	bl	8001b40 <HAL_GetTick>
 8004038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403a:	e00a      	b.n	8004052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800403c:	f7fd fd80 	bl	8001b40 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e04f      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	4b2b      	ldr	r3, [pc, #172]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 020c 	and.w	r2, r3, #12
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	429a      	cmp	r2, r3
 8004062:	d1eb      	bne.n	800403c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004064:	4b25      	ldr	r3, [pc, #148]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d20c      	bcs.n	800408c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b22      	ldr	r3, [pc, #136]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e032      	b.n	80040f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4916      	ldr	r1, [pc, #88]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b6:	4b12      	ldr	r3, [pc, #72]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	490e      	ldr	r1, [pc, #56]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ca:	f000 f821 	bl	8004110 <HAL_RCC_GetSysClockFreq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	490a      	ldr	r1, [pc, #40]	@ (8004104 <HAL_RCC_ClockConfig+0x1c0>)
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80040e6:	4b09      	ldr	r3, [pc, #36]	@ (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd fce4 	bl	8001ab8 <HAL_InitTick>

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023c00 	.word	0x40023c00
 8004100:	40023800 	.word	0x40023800
 8004104:	08009350 	.word	0x08009350
 8004108:	2000007c 	.word	0x2000007c
 800410c:	20000080 	.word	0x20000080

08004110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004114:	b094      	sub	sp, #80	@ 0x50
 8004116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004128:	4b79      	ldr	r3, [pc, #484]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b08      	cmp	r3, #8
 8004132:	d00d      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x40>
 8004134:	2b08      	cmp	r3, #8
 8004136:	f200 80e1 	bhi.w	80042fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x34>
 800413e:	2b04      	cmp	r3, #4
 8004140:	d003      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0x3a>
 8004142:	e0db      	b.n	80042fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004144:	4b73      	ldr	r3, [pc, #460]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x204>)
 8004146:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004148:	e0db      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414a:	4b73      	ldr	r3, [pc, #460]	@ (8004318 <HAL_RCC_GetSysClockFreq+0x208>)
 800414c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800414e:	e0d8      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004150:	4b6f      	ldr	r3, [pc, #444]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415a:	4b6d      	ldr	r3, [pc, #436]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d063      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004166:	4b6a      	ldr	r3, [pc, #424]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	099b      	lsrs	r3, r3, #6
 800416c:	2200      	movs	r2, #0
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004170:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004178:	633b      	str	r3, [r7, #48]	@ 0x30
 800417a:	2300      	movs	r3, #0
 800417c:	637b      	str	r3, [r7, #52]	@ 0x34
 800417e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004182:	4622      	mov	r2, r4
 8004184:	462b      	mov	r3, r5
 8004186:	f04f 0000 	mov.w	r0, #0
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	0159      	lsls	r1, r3, #5
 8004190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004194:	0150      	lsls	r0, r2, #5
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4621      	mov	r1, r4
 800419c:	1a51      	subs	r1, r2, r1
 800419e:	6139      	str	r1, [r7, #16]
 80041a0:	4629      	mov	r1, r5
 80041a2:	eb63 0301 	sbc.w	r3, r3, r1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041b4:	4659      	mov	r1, fp
 80041b6:	018b      	lsls	r3, r1, #6
 80041b8:	4651      	mov	r1, sl
 80041ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041be:	4651      	mov	r1, sl
 80041c0:	018a      	lsls	r2, r1, #6
 80041c2:	4651      	mov	r1, sl
 80041c4:	ebb2 0801 	subs.w	r8, r2, r1
 80041c8:	4659      	mov	r1, fp
 80041ca:	eb63 0901 	sbc.w	r9, r3, r1
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041e2:	4690      	mov	r8, r2
 80041e4:	4699      	mov	r9, r3
 80041e6:	4623      	mov	r3, r4
 80041e8:	eb18 0303 	adds.w	r3, r8, r3
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	462b      	mov	r3, r5
 80041f0:	eb49 0303 	adc.w	r3, r9, r3
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	f04f 0200 	mov.w	r2, #0
 80041fa:	f04f 0300 	mov.w	r3, #0
 80041fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004202:	4629      	mov	r1, r5
 8004204:	024b      	lsls	r3, r1, #9
 8004206:	4621      	mov	r1, r4
 8004208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800420c:	4621      	mov	r1, r4
 800420e:	024a      	lsls	r2, r1, #9
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	2200      	movs	r2, #0
 8004218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800421a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800421c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004220:	f7fb ffd2 	bl	80001c8 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	e058      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b38      	ldr	r3, [pc, #224]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	2200      	movs	r2, #0
 8004236:	4618      	mov	r0, r3
 8004238:	4611      	mov	r1, r2
 800423a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	2300      	movs	r3, #0
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
 8004244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	f04f 0000 	mov.w	r0, #0
 8004250:	f04f 0100 	mov.w	r1, #0
 8004254:	0159      	lsls	r1, r3, #5
 8004256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800425a:	0150      	lsls	r0, r2, #5
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4641      	mov	r1, r8
 8004262:	ebb2 0a01 	subs.w	sl, r2, r1
 8004266:	4649      	mov	r1, r9
 8004268:	eb63 0b01 	sbc.w	fp, r3, r1
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800427c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004280:	ebb2 040a 	subs.w	r4, r2, sl
 8004284:	eb63 050b 	sbc.w	r5, r3, fp
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	00eb      	lsls	r3, r5, #3
 8004292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004296:	00e2      	lsls	r2, r4, #3
 8004298:	4614      	mov	r4, r2
 800429a:	461d      	mov	r5, r3
 800429c:	4643      	mov	r3, r8
 800429e:	18e3      	adds	r3, r4, r3
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	464b      	mov	r3, r9
 80042a4:	eb45 0303 	adc.w	r3, r5, r3
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	f04f 0200 	mov.w	r2, #0
 80042ae:	f04f 0300 	mov.w	r3, #0
 80042b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042b6:	4629      	mov	r1, r5
 80042b8:	028b      	lsls	r3, r1, #10
 80042ba:	4621      	mov	r1, r4
 80042bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042c0:	4621      	mov	r1, r4
 80042c2:	028a      	lsls	r2, r1, #10
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042ca:	2200      	movs	r2, #0
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	61fa      	str	r2, [r7, #28]
 80042d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d4:	f7fb ff78 	bl	80001c8 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4613      	mov	r3, r2
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	3301      	adds	r3, #1
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80042f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80042fa:	e002      	b.n	8004302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b05      	ldr	r3, [pc, #20]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x204>)
 80042fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004302:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004304:	4618      	mov	r0, r3
 8004306:	3750      	adds	r7, #80	@ 0x50
 8004308:	46bd      	mov	sp, r7
 800430a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
 8004314:	00f42400 	.word	0x00f42400
 8004318:	007a1200 	.word	0x007a1200

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <HAL_RCC_GetHCLKFreq+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	2000007c 	.word	0x2000007c

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004338:	f7ff fff0 	bl	800431c <HAL_RCC_GetHCLKFreq>
 800433c:	4602      	mov	r2, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	@ (8004354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4903      	ldr	r1, [pc, #12]	@ (8004358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434a:	5ccb      	ldrb	r3, [r1, r3]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	08009360 	.word	0x08009360

0800435c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07b      	b.n	8004466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800437e:	d009      	beq.n	8004394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	61da      	str	r2, [r3, #28]
 8004386:	e005      	b.n	8004394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fc ffb8 	bl	8001324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004418:	ea42 0103 	orr.w	r1, r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	f003 0104 	and.w	r1, r3, #4
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	f003 0210 	and.w	r2, r3, #16
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e01a      	b.n	80044b6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004496:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fc ff8b 	bl	80013b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b08a      	sub	sp, #40	@ 0x28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
 80044ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044cc:	2301      	movs	r3, #1
 80044ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044d0:	f7fd fb36 	bl	8001b40 <HAL_GetTick>
 80044d4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044dc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80044e4:	887b      	ldrh	r3, [r7, #2]
 80044e6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e8:	7ffb      	ldrb	r3, [r7, #31]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d00c      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x4a>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f4:	d106      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x46>
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d001      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	e17f      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_SPI_TransmitReceive+0x5c>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_SPI_TransmitReceive+0x5c>
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e174      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_SPI_TransmitReceive+0x6e>
 8004528:	2302      	movs	r3, #2
 800452a:	e16d      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2205      	movs	r2, #5
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	887a      	ldrh	r2, [r7, #2]
 800455e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d007      	beq.n	800459c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800459a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045a4:	d17e      	bne.n	80046a4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_TransmitReceive+0xf6>
 80045ae:	8afb      	ldrh	r3, [r7, #22]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d16c      	bne.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d8:	e059      	b.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d11b      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x162>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d016      	beq.n	8004620 <HAL_SPI_TransmitReceive+0x162>
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d113      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	1c9a      	adds	r2, r3, #2
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d119      	bne.n	8004662 <HAL_SPI_TransmitReceive+0x1a4>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d014      	beq.n	8004662 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	b292      	uxth	r2, r2
 8004644:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800464a:	1c9a      	adds	r2, r3, #2
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800465e:	2301      	movs	r3, #1
 8004660:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004662:	f7fd fa6d 	bl	8001b40 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800466e:	429a      	cmp	r2, r3
 8004670:	d80d      	bhi.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004678:	d009      	beq.n	800468e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e0bc      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1a0      	bne.n	80045da <HAL_SPI_TransmitReceive+0x11c>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d19b      	bne.n	80045da <HAL_SPI_TransmitReceive+0x11c>
 80046a2:	e082      	b.n	80047aa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x1f4>
 80046ac:	8afb      	ldrh	r3, [r7, #22]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d171      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	330c      	adds	r3, #12
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d8:	e05d      	b.n	8004796 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11c      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x264>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d017      	beq.n	8004722 <HAL_SPI_TransmitReceive+0x264>
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d114      	bne.n	8004722 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004714:	b29b      	uxth	r3, r3
 8004716:	3b01      	subs	r3, #1
 8004718:	b29a      	uxth	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b01      	cmp	r3, #1
 800472e:	d119      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x2a6>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d014      	beq.n	8004764 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004756:	b29b      	uxth	r3, r3
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004760:	2301      	movs	r3, #1
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004764:	f7fd f9ec 	bl	8001b40 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	6a3b      	ldr	r3, [r7, #32]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004770:	429a      	cmp	r2, r3
 8004772:	d803      	bhi.n	800477c <HAL_SPI_TransmitReceive+0x2be>
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800477a:	d102      	bne.n	8004782 <HAL_SPI_TransmitReceive+0x2c4>
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e038      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d19c      	bne.n	80046da <HAL_SPI_TransmitReceive+0x21c>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d197      	bne.n	80046da <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047aa:	6a3a      	ldr	r2, [r7, #32]
 80047ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f8c4 	bl	800493c <SPI_EndRxTxTransaction>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e01d      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004806:	2300      	movs	r3, #0
  }
}
 8004808:	4618      	mov	r0, r3
 800480a:	3728      	adds	r7, #40	@ 0x28
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800481e:	b2db      	uxtb	r3, r3
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	603b      	str	r3, [r7, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800483c:	f7fd f980 	bl	8001b40 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	4413      	add	r3, r2
 800484a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800484c:	f7fd f978 	bl	8001b40 <HAL_GetTick>
 8004850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004852:	4b39      	ldr	r3, [pc, #228]	@ (8004938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	015b      	lsls	r3, r3, #5
 8004858:	0d1b      	lsrs	r3, r3, #20
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	fb02 f303 	mul.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004862:	e054      	b.n	800490e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800486a:	d050      	beq.n	800490e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800486c:	f7fd f968 	bl	8001b40 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	429a      	cmp	r2, r3
 800487a:	d902      	bls.n	8004882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d13d      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800489a:	d111      	bne.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a4:	d004      	beq.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ae:	d107      	bne.n	80048c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c8:	d10f      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e017      	b.n	800492e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	3b01      	subs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	bf0c      	ite	eq
 800491e:	2301      	moveq	r3, #1
 8004920:	2300      	movne	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	429a      	cmp	r2, r3
 800492a:	d19b      	bne.n	8004864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	2000007c 	.word	0x2000007c

0800493c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2201      	movs	r2, #1
 8004950:	2102      	movs	r1, #2
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7ff ff6a 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e032      	b.n	80049d4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800496e:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <SPI_EndRxTxTransaction+0xa0>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1b      	ldr	r2, [pc, #108]	@ (80049e0 <SPI_EndRxTxTransaction+0xa4>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	0d5b      	lsrs	r3, r3, #21
 800497a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800498c:	d112      	bne.n	80049b4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2200      	movs	r2, #0
 8004996:	2180      	movs	r1, #128	@ 0x80
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff ff47 	bl	800482c <SPI_WaitFlagStateUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d016      	beq.n	80049d2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e00f      	b.n	80049d4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	3b01      	subs	r3, #1
 80049be:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b80      	cmp	r3, #128	@ 0x80
 80049cc:	d0f2      	beq.n	80049b4 <SPI_EndRxTxTransaction+0x78>
 80049ce:	e000      	b.n	80049d2 <SPI_EndRxTxTransaction+0x96>
        break;
 80049d0:	bf00      	nop
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	2000007c 	.word	0x2000007c
 80049e0:	165e9f81 	.word	0x165e9f81

080049e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e041      	b.n	8004a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc ffe0 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f000 fa7e 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d001      	beq.n	8004a9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e04e      	b.n	8004b3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a23      	ldr	r2, [pc, #140]	@ (8004b48 <HAL_TIM_Base_Start_IT+0xc4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac6:	d01d      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	@ (8004b58 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <HAL_TIM_Base_Start_IT+0xd8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_TIM_Base_Start_IT+0x80>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d111      	bne.n	8004b28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b06      	cmp	r3, #6
 8004b14:	d010      	beq.n	8004b38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b26:	e007      	b.n	8004b38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40010400 	.word	0x40010400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40001800 	.word	0x40001800

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f999 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f98b 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f99c 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f973 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f965 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f976 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f94d 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 f93f 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f950 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0210 	mvn.w	r2, #16
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2208      	movs	r2, #8
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f927 	bl	8004ee6 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f919 	bl	8004ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f92a 	bl	8004efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0201 	mvn.w	r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fad0 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa68 	bl	80051c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8fb 	bl	8004f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0220 	mvn.w	r2, #32
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa3a 	bl	80051b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_ConfigClockSource+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e0b4      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x186>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d98:	d03e      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xd4>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	f200 8087 	bhi.w	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_TIM_ConfigClockSource+0x172>
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	d87f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b70      	cmp	r3, #112	@ 0x70
 8004db2:	d01a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xa6>
 8004db4:	2b70      	cmp	r3, #112	@ 0x70
 8004db6:	d87b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b60      	cmp	r3, #96	@ 0x60
 8004dba:	d050      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x11a>
 8004dbc:	2b60      	cmp	r3, #96	@ 0x60
 8004dbe:	d877      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	d03c      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xfa>
 8004dc4:	2b50      	cmp	r3, #80	@ 0x50
 8004dc6:	d873      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d058      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x13a>
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d86f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b30      	cmp	r3, #48	@ 0x30
 8004dd2:	d064      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	2b30      	cmp	r3, #48	@ 0x30
 8004dd6:	d86b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d060      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d867      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d05a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004de8:	e062      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dfa:	f000 f9b9 	bl	8005170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]
      break;
 8004e16:	e04f      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	f000 f9a2 	bl	8005170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e03c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 f916 	bl	800507c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2150      	movs	r1, #80	@ 0x50
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 f96f 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e02c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 f935 	bl	80050da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2160      	movs	r1, #96	@ 0x60
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f95f 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e01c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 f8f6 	bl	800507c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f94f 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e00c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 f946 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004eae:	e003      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a46      	ldr	r2, [pc, #280]	@ (8005050 <TIM_Base_SetConfig+0x12c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a43      	ldr	r2, [pc, #268]	@ (8005054 <TIM_Base_SetConfig+0x130>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a42      	ldr	r2, [pc, #264]	@ (8005058 <TIM_Base_SetConfig+0x134>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a41      	ldr	r2, [pc, #260]	@ (800505c <TIM_Base_SetConfig+0x138>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a40      	ldr	r2, [pc, #256]	@ (8005060 <TIM_Base_SetConfig+0x13c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a35      	ldr	r2, [pc, #212]	@ (8005050 <TIM_Base_SetConfig+0x12c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d02b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f84:	d027      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a32      	ldr	r2, [pc, #200]	@ (8005054 <TIM_Base_SetConfig+0x130>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d023      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a31      	ldr	r2, [pc, #196]	@ (8005058 <TIM_Base_SetConfig+0x134>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a30      	ldr	r2, [pc, #192]	@ (800505c <TIM_Base_SetConfig+0x138>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8005060 <TIM_Base_SetConfig+0x13c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8005064 <TIM_Base_SetConfig+0x140>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8005068 <TIM_Base_SetConfig+0x144>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800506c <TIM_Base_SetConfig+0x148>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <TIM_Base_SetConfig+0x14c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005074 <TIM_Base_SetConfig+0x150>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	@ (8005078 <TIM_Base_SetConfig+0x154>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a10      	ldr	r2, [pc, #64]	@ (8005050 <TIM_Base_SetConfig+0x12c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a12      	ldr	r2, [pc, #72]	@ (8005060 <TIM_Base_SetConfig+0x13c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b01      	cmp	r3, #1
 8005034:	d105      	bne.n	8005042 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]
  }
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40010400 	.word	0x40010400
 8005064:	40014000 	.word	0x40014000
 8005068:	40014400 	.word	0x40014400
 800506c:	40014800 	.word	0x40014800
 8005070:	40001800 	.word	0x40001800
 8005074:	40001c00 	.word	0x40001c00
 8005078:	40002000 	.word	0x40002000

0800507c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0201 	bic.w	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 030a 	bic.w	r3, r3, #10
 80050b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f023 0210 	bic.w	r2, r3, #16
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	f043 0307 	orr.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800518a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	021a      	lsls	r2, r3, #8
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	431a      	orrs	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d8:	b084      	sub	sp, #16
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	f107 001c 	add.w	r0, r7, #28
 80051e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d123      	bne.n	800523a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800521a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800521e:	2b01      	cmp	r3, #1
 8005220:	d105      	bne.n	800522e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fae8 	bl	8006804 <USB_CoreReset>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e01b      	b.n	8005272 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 fadc 	bl	8006804 <USB_CoreReset>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005250:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	639a      	str	r2, [r3, #56]	@ 0x38
 8005264:	e005      	b.n	8005272 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005272:	7fbb      	ldrb	r3, [r7, #30]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10b      	bne.n	8005290 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f043 0206 	orr.w	r2, r3, #6
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800529c:	b004      	add	sp, #16
 800529e:	4770      	bx	lr

080052a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d165      	bne.n	8005380 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4a41      	ldr	r2, [pc, #260]	@ (80053bc <USB_SetTurnaroundTime+0x11c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d906      	bls.n	80052ca <USB_SetTurnaroundTime+0x2a>
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a40      	ldr	r2, [pc, #256]	@ (80053c0 <USB_SetTurnaroundTime+0x120>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d202      	bcs.n	80052ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052c4:	230f      	movs	r3, #15
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e062      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4a3c      	ldr	r2, [pc, #240]	@ (80053c0 <USB_SetTurnaroundTime+0x120>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d306      	bcc.n	80052e0 <USB_SetTurnaroundTime+0x40>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a3b      	ldr	r2, [pc, #236]	@ (80053c4 <USB_SetTurnaroundTime+0x124>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d202      	bcs.n	80052e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80052da:	230e      	movs	r3, #14
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	e057      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4a38      	ldr	r2, [pc, #224]	@ (80053c4 <USB_SetTurnaroundTime+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d306      	bcc.n	80052f6 <USB_SetTurnaroundTime+0x56>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a37      	ldr	r2, [pc, #220]	@ (80053c8 <USB_SetTurnaroundTime+0x128>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d202      	bcs.n	80052f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80052f0:	230d      	movs	r3, #13
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e04c      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4a33      	ldr	r2, [pc, #204]	@ (80053c8 <USB_SetTurnaroundTime+0x128>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d306      	bcc.n	800530c <USB_SetTurnaroundTime+0x6c>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4a32      	ldr	r2, [pc, #200]	@ (80053cc <USB_SetTurnaroundTime+0x12c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d802      	bhi.n	800530c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005306:	230c      	movs	r3, #12
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	e041      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4a2f      	ldr	r2, [pc, #188]	@ (80053cc <USB_SetTurnaroundTime+0x12c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d906      	bls.n	8005322 <USB_SetTurnaroundTime+0x82>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a2e      	ldr	r2, [pc, #184]	@ (80053d0 <USB_SetTurnaroundTime+0x130>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d802      	bhi.n	8005322 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800531c:	230b      	movs	r3, #11
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	e036      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4a2a      	ldr	r2, [pc, #168]	@ (80053d0 <USB_SetTurnaroundTime+0x130>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d906      	bls.n	8005338 <USB_SetTurnaroundTime+0x98>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a29      	ldr	r2, [pc, #164]	@ (80053d4 <USB_SetTurnaroundTime+0x134>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d802      	bhi.n	8005338 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005332:	230a      	movs	r3, #10
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e02b      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a26      	ldr	r2, [pc, #152]	@ (80053d4 <USB_SetTurnaroundTime+0x134>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d906      	bls.n	800534e <USB_SetTurnaroundTime+0xae>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a25      	ldr	r2, [pc, #148]	@ (80053d8 <USB_SetTurnaroundTime+0x138>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d202      	bcs.n	800534e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005348:	2309      	movs	r3, #9
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e020      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	4a21      	ldr	r2, [pc, #132]	@ (80053d8 <USB_SetTurnaroundTime+0x138>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d306      	bcc.n	8005364 <USB_SetTurnaroundTime+0xc4>
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a20      	ldr	r2, [pc, #128]	@ (80053dc <USB_SetTurnaroundTime+0x13c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d802      	bhi.n	8005364 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800535e:	2308      	movs	r3, #8
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e015      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4a1d      	ldr	r2, [pc, #116]	@ (80053dc <USB_SetTurnaroundTime+0x13c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d906      	bls.n	800537a <USB_SetTurnaroundTime+0xda>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <USB_SetTurnaroundTime+0x140>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d202      	bcs.n	800537a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005374:	2307      	movs	r3, #7
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e00a      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800537a:	2306      	movs	r3, #6
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	e007      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005380:	79fb      	ldrb	r3, [r7, #7]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d102      	bne.n	800538c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005386:	2309      	movs	r3, #9
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	e001      	b.n	8005390 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800538c:	2309      	movs	r3, #9
 800538e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	00d8acbf 	.word	0x00d8acbf
 80053c0:	00e4e1c0 	.word	0x00e4e1c0
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	01067380 	.word	0x01067380
 80053cc:	011a499f 	.word	0x011a499f
 80053d0:	01312cff 	.word	0x01312cff
 80053d4:	014ca43f 	.word	0x014ca43f
 80053d8:	016e3600 	.word	0x016e3600
 80053dc:	01a6ab1f 	.word	0x01a6ab1f
 80053e0:	01e84800 	.word	0x01e84800

080053e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0201 	bic.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d115      	bne.n	8005476 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005456:	200a      	movs	r0, #10
 8005458:	f7fc fb7e 	bl	8001b58 <HAL_Delay>
      ms += 10U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	330a      	adds	r3, #10
 8005460:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f93f 	bl	80066e6 <USB_GetMode>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d01e      	beq.n	80054ac <USB_SetCurrentMode+0x84>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2bc7      	cmp	r3, #199	@ 0xc7
 8005472:	d9f0      	bls.n	8005456 <USB_SetCurrentMode+0x2e>
 8005474:	e01a      	b.n	80054ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d115      	bne.n	80054a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005488:	200a      	movs	r0, #10
 800548a:	f7fc fb65 	bl	8001b58 <HAL_Delay>
      ms += 10U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	330a      	adds	r3, #10
 8005492:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f926 	bl	80066e6 <USB_GetMode>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <USB_SetCurrentMode+0x84>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80054a4:	d9f0      	bls.n	8005488 <USB_SetCurrentMode+0x60>
 80054a6:	e001      	b.n	80054ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e005      	b.n	80054b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80054b0:	d101      	bne.n	80054b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c0:	b084      	sub	sp, #16
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b086      	sub	sp, #24
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054da:	2300      	movs	r3, #0
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e009      	b.n	80054f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3340      	adds	r3, #64	@ 0x40
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	2200      	movs	r2, #0
 80054ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	3301      	adds	r3, #1
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b0e      	cmp	r3, #14
 80054f8:	d9f2      	bls.n	80054e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11c      	bne.n	800553c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005532:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	@ 0x38
 800553a:	e00b      	b.n	8005554 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005540:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800555a:	461a      	mov	r2, r3
 800555c:	2300      	movs	r3, #0
 800555e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005560:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10d      	bne.n	8005584 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005570:	2100      	movs	r1, #0
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f968 	bl	8005848 <USB_SetDevSpeed>
 8005578:	e008      	b.n	800558c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800557a:	2101      	movs	r1, #1
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f963 	bl	8005848 <USB_SetDevSpeed>
 8005582:	e003      	b.n	800558c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005584:	2103      	movs	r1, #3
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f95e 	bl	8005848 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800558c:	2110      	movs	r1, #16
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8fa 	bl	8005788 <USB_FlushTxFifo>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f924 	bl	80057ec <USB_FlushRxFifo>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c0:	461a      	mov	r2, r3
 80055c2:	2300      	movs	r3, #0
 80055c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055cc:	461a      	mov	r2, r3
 80055ce:	2300      	movs	r3, #0
 80055d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e043      	b.n	8005660 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055ee:	d118      	bne.n	8005622 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005602:	461a      	mov	r2, r3
 8005604:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e013      	b.n	8005634 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005618:	461a      	mov	r2, r3
 800561a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e008      	b.n	8005634 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	2300      	movs	r3, #0
 8005644:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005652:	461a      	mov	r2, r3
 8005654:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	3301      	adds	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005664:	461a      	mov	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4293      	cmp	r3, r2
 800566a:	d3b5      	bcc.n	80055d8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]
 8005670:	e043      	b.n	80056fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005688:	d118      	bne.n	80056bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569c:	461a      	mov	r2, r3
 800569e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e013      	b.n	80056ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b2:	461a      	mov	r2, r3
 80056b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e008      	b.n	80056ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c8:	461a      	mov	r2, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056da:	461a      	mov	r2, r3
 80056dc:	2300      	movs	r3, #0
 80056de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ec:	461a      	mov	r2, r3
 80056ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	3301      	adds	r3, #1
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056fe:	461a      	mov	r2, r3
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4293      	cmp	r3, r2
 8005704:	d3b5      	bcc.n	8005672 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005718:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005726:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005728:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f043 0210 	orr.w	r2, r3, #16
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <USB_DevInit+0x2c4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005748:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	f043 0208 	orr.w	r2, r3, #8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800575c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005760:	2b01      	cmp	r3, #1
 8005762:	d107      	bne.n	8005774 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005774:	7dfb      	ldrb	r3, [r7, #23]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005780:	b004      	add	sp, #16
 8005782:	4770      	bx	lr
 8005784:	803c3800 	.word	0x803c3800

08005788 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3301      	adds	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057a2:	d901      	bls.n	80057a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e01b      	b.n	80057e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	daf2      	bge.n	8005796 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	019b      	lsls	r3, r3, #6
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057cc:	d901      	bls.n	80057d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e006      	b.n	80057e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d0f0      	beq.n	80057c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005804:	d901      	bls.n	800580a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e018      	b.n	800583c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	2b00      	cmp	r3, #0
 8005810:	daf2      	bge.n	80057f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2210      	movs	r2, #16
 800581a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005828:	d901      	bls.n	800582e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e006      	b.n	800583c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b10      	cmp	r3, #16
 8005838:	d0f0      	beq.n	800581c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 0306 	and.w	r3, r3, #6
 8005892:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800589a:	2300      	movs	r3, #0
 800589c:	75fb      	strb	r3, [r7, #23]
 800589e:	e00a      	b.n	80058b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d002      	beq.n	80058ac <USB_GetDevSpeed+0x32>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d102      	bne.n	80058b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058ac:	2302      	movs	r3, #2
 80058ae:	75fb      	strb	r3, [r7, #23]
 80058b0:	e001      	b.n	80058b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058b2:	230f      	movs	r3, #15
 80058b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d13a      	bne.n	8005956 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 030f 	and.w	r3, r3, #15
 80058f0:	2101      	movs	r1, #1
 80058f2:	fa01 f303 	lsl.w	r3, r1, r3
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058fe:	4313      	orrs	r3, r2
 8005900:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d155      	bne.n	80059c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	791b      	ldrb	r3, [r3, #4]
 8005932:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005934:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	059b      	lsls	r3, r3, #22
 800593a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800593c:	4313      	orrs	r3, r2
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800594e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e036      	b.n	80059c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595c:	69da      	ldr	r2, [r3, #28]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	2101      	movs	r1, #1
 8005968:	fa01 f303 	lsl.w	r3, r1, r3
 800596c:	041b      	lsls	r3, r3, #16
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005974:	4313      	orrs	r3, r2
 8005976:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d11a      	bne.n	80059c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	791b      	ldrb	r3, [r3, #4]
 80059a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059aa:	430b      	orrs	r3, r1
 80059ac:	4313      	orrs	r3, r2
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
	...

080059d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	785b      	ldrb	r3, [r3, #1]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d161      	bne.n	8005ab4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a06:	d11f      	bne.n	8005a48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	2101      	movs	r1, #1
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	68f9      	ldr	r1, [r7, #12]
 8005a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a68:	4013      	ands	r3, r2
 8005a6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	43db      	mvns	r3, r3
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	0159      	lsls	r1, r3, #5
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	440b      	add	r3, r1
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aaa:	4619      	mov	r1, r3
 8005aac:	4b35      	ldr	r3, [pc, #212]	@ (8005b84 <USB_DeactivateEndpoint+0x1b0>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
 8005ab2:	e060      	b.n	8005b76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aca:	d11f      	bne.n	8005b0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ae6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005aea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	0151      	lsls	r1, r2, #5
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	440a      	add	r2, r1
 8005b02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	f003 030f 	and.w	r3, r3, #15
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b22:	041b      	lsls	r3, r3, #16
 8005b24:	43db      	mvns	r3, r3
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b36:	69da      	ldr	r2, [r3, #28]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	43db      	mvns	r3, r3
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b50:	4013      	ands	r3, r2
 8005b52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	0159      	lsls	r1, r3, #5
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	440b      	add	r3, r1
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <USB_DeactivateEndpoint+0x1b4>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	ec337800 	.word	0xec337800
 8005b88:	eff37800 	.word	0xeff37800

08005b8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	@ 0x28
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	f040 817f 	bne.w	8005eac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d132      	bne.n	8005c1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bd0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005bd4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c14:	0cdb      	lsrs	r3, r3, #19
 8005c16:	04db      	lsls	r3, r3, #19
 8005c18:	6113      	str	r3, [r2, #16]
 8005c1a:	e097      	b.n	8005d4c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	69fa      	ldr	r2, [r7, #28]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c36:	0cdb      	lsrs	r3, r3, #19
 8005c38:	04db      	lsls	r3, r3, #19
 8005c3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c5e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11a      	bne.n	8005c9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d903      	bls.n	8005c7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c98:	6113      	str	r3, [r2, #16]
 8005c9a:	e044      	b.n	8005d26 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	1e5a      	subs	r2, r3, #1
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	8afb      	ldrh	r3, [r7, #22]
 8005cc2:	04d9      	lsls	r1, r3, #19
 8005cc4:	4ba4      	ldr	r3, [pc, #656]	@ (8005f58 <USB_EPStartXfer+0x3cc>)
 8005cc6:	400b      	ands	r3, r1
 8005cc8:	69b9      	ldr	r1, [r7, #24]
 8005cca:	0148      	lsls	r0, r1, #5
 8005ccc:	69f9      	ldr	r1, [r7, #28]
 8005cce:	4401      	add	r1, r0
 8005cd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	791b      	ldrb	r3, [r3, #4]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d122      	bne.n	8005d26 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005cfe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	8afb      	ldrh	r3, [r7, #22]
 8005d10:	075b      	lsls	r3, r3, #29
 8005d12:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005d16:	69b9      	ldr	r1, [r7, #24]
 8005d18:	0148      	lsls	r0, r1, #5
 8005d1a:	69f9      	ldr	r1, [r7, #28]
 8005d1c:	4401      	add	r1, r0
 8005d1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d22:	4313      	orrs	r3, r2
 8005d24:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3c:	69b9      	ldr	r1, [r7, #24]
 8005d3e:	0148      	lsls	r0, r1, #5
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	4401      	add	r1, r0
 8005d44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d14b      	bne.n	8005dea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d009      	beq.n	8005d6e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d66:	461a      	mov	r2, r3
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	791b      	ldrb	r3, [r3, #4]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d128      	bne.n	8005dc8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d110      	bne.n	8005da8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005da0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	e00f      	b.n	8005dc8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dc6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e166      	b.n	80060b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e04:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e08:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	791b      	ldrb	r3, [r3, #4]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d015      	beq.n	8005e3e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 814e 	beq.w	80060b8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	69f9      	ldr	r1, [r7, #28]
 8005e34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e3c:	e13c      	b.n	80060b8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d110      	bne.n	8005e70 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e00f      	b.n	8005e90 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e8e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68d9      	ldr	r1, [r3, #12]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	b298      	uxth	r0, r3
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f9b9 	bl	800621c <USB_WritePacket>
 8005eaa:	e105      	b.n	80060b8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec6:	0cdb      	lsrs	r3, r3, #19
 8005ec8:	04db      	lsls	r3, r3, #19
 8005eca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005eea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005eee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d132      	bne.n	8005f5c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f24:	69b9      	ldr	r1, [r7, #24]
 8005f26:	0148      	lsls	r0, r1, #5
 8005f28:	69f9      	ldr	r1, [r7, #28]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f30:	4313      	orrs	r3, r2
 8005f32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f52:	6113      	str	r3, [r2, #16]
 8005f54:	e062      	b.n	800601c <USB_EPStartXfer+0x490>
 8005f56:	bf00      	nop
 8005f58:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d123      	bne.n	8005fac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f7a:	69b9      	ldr	r1, [r7, #24]
 8005f7c:	0148      	lsls	r0, r1, #5
 8005f7e:	69f9      	ldr	r1, [r7, #28]
 8005f80:	4401      	add	r1, r0
 8005f82:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fa8:	6113      	str	r3, [r2, #16]
 8005faa:	e037      	b.n	800601c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	1e5a      	subs	r2, r3, #1
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	8afa      	ldrh	r2, [r7, #22]
 8005fc8:	fb03 f202 	mul.w	r2, r3, r2
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	8afb      	ldrh	r3, [r7, #22]
 8005fe0:	04d9      	lsls	r1, r3, #19
 8005fe2:	4b38      	ldr	r3, [pc, #224]	@ (80060c4 <USB_EPStartXfer+0x538>)
 8005fe4:	400b      	ands	r3, r1
 8005fe6:	69b9      	ldr	r1, [r7, #24]
 8005fe8:	0148      	lsls	r0, r1, #5
 8005fea:	69f9      	ldr	r1, [r7, #28]
 8005fec:	4401      	add	r1, r0
 8005fee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	0148      	lsls	r0, r1, #5
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	4401      	add	r1, r0
 8006014:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006018:	4313      	orrs	r3, r2
 800601a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800601c:	79fb      	ldrb	r3, [r7, #7]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d10d      	bne.n	800603e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68d9      	ldr	r1, [r3, #12]
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603a:	460a      	mov	r2, r1
 800603c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	791b      	ldrb	r3, [r3, #4]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d128      	bne.n	8006098 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006070:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006074:	6013      	str	r3, [r2, #0]
 8006076:	e00f      	b.n	8006098 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006096:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	0151      	lsls	r1, r2, #5
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	440a      	add	r2, r1
 80060ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	1ff80000 	.word	0x1ff80000

080060c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d14a      	bne.n	800617c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060fe:	f040 8086 	bne.w	800620e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	781b      	ldrb	r3, [r3, #0]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	7812      	ldrb	r2, [r2, #0]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	440a      	add	r2, r1
 800611c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006120:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006124:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	7812      	ldrb	r2, [r2, #0]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	440a      	add	r2, r1
 8006140:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006144:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006148:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006156:	4293      	cmp	r3, r2
 8006158:	d902      	bls.n	8006160 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
          break;
 800615e:	e056      	b.n	800620e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006178:	d0e7      	beq.n	800614a <USB_EPStopXfer+0x82>
 800617a:	e048      	b.n	800620e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006190:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006194:	d13b      	bne.n	800620e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	7812      	ldrb	r2, [r2, #0]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	7812      	ldrb	r2, [r2, #0]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d902      	bls.n	80061f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	75fb      	strb	r3, [r7, #23]
          break;
 80061f2:	e00c      	b.n	800620e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800620c:	d0e7      	beq.n	80061de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006210:	4618      	mov	r0, r3
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	4611      	mov	r1, r2
 8006228:	461a      	mov	r2, r3
 800622a:	460b      	mov	r3, r1
 800622c:	71fb      	strb	r3, [r7, #7]
 800622e:	4613      	mov	r3, r2
 8006230:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800623a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800623e:	2b00      	cmp	r3, #0
 8006240:	d123      	bne.n	800628a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006242:	88bb      	ldrh	r3, [r7, #4]
 8006244:	3303      	adds	r3, #3
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e018      	b.n	8006282 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	031a      	lsls	r2, r3, #12
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800625c:	461a      	mov	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3301      	adds	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	3301      	adds	r3, #1
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	d3e2      	bcc.n	8006250 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3724      	adds	r7, #36	@ 0x24
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006298:	b480      	push	{r7}
 800629a:	b08b      	sub	sp, #44	@ 0x2c
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	e014      	b.n	80062ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	3301      	adds	r3, #1
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	3301      	adds	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	3301      	adds	r3, #1
 80062e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	3301      	adds	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	3301      	adds	r3, #1
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d3e6      	bcc.n	80062c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01e      	beq.n	800633a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006306:	461a      	mov	r2, r3
 8006308:	f107 0310 	add.w	r3, r7, #16
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	b2da      	uxtb	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	701a      	strb	r2, [r3, #0]
      i++;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	3301      	adds	r3, #1
 8006326:	623b      	str	r3, [r7, #32]
      pDest++;
 8006328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632a:	3301      	adds	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800632e:	8bfb      	ldrh	r3, [r7, #30]
 8006330:	3b01      	subs	r3, #1
 8006332:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006334:	8bfb      	ldrh	r3, [r7, #30]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ea      	bne.n	8006310 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800633c:	4618      	mov	r0, r3
 800633e:	372c      	adds	r7, #44	@ 0x2c
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d12c      	bne.n	80063be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	db12      	blt.n	800639c <USB_EPSetStall+0x54>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00f      	beq.n	800639c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006396:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800639a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e02b      	b.n	8006416 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	db12      	blt.n	80063f6 <USB_EPSetStall+0xae>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00f      	beq.n	80063f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006410:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d128      	bne.n	8006492 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800645a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800645e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	791b      	ldrb	r3, [r3, #4]
 8006464:	2b03      	cmp	r3, #3
 8006466:	d003      	beq.n	8006470 <USB_EPClearStall+0x4c>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d138      	bne.n	80064e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800648a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e027      	b.n	80064e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	791b      	ldrb	r3, [r3, #4]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d003      	beq.n	80064c2 <USB_EPClearStall+0x9e>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d10f      	bne.n	80064e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800650e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006512:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006524:	68f9      	ldr	r1, [r7, #12]
 8006526:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800652a:	4313      	orrs	r3, r2
 800652c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800656a:	f023 0302 	bic.w	r3, r3, #2
 800656e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065ac:	f043 0302 	orr.w	r3, r3, #2
 80065b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	0c1b      	lsrs	r3, r3, #16
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	b29b      	uxth	r3, r3
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800667c:	68bb      	ldr	r3, [r7, #8]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800668a:	b480      	push	{r7}
 800668c:	b087      	sub	sp, #28
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ba:	01db      	lsls	r3, r3, #7
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4013      	ands	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066d8:	68bb      	ldr	r3, [r7, #8]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f003 0301 	and.w	r3, r3, #1
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800671c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006720:	f023 0307 	bic.w	r3, r3, #7
 8006724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	460b      	mov	r3, r1
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	333c      	adds	r3, #60	@ 0x3c
 800675e:	3304      	adds	r3, #4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4a26      	ldr	r2, [pc, #152]	@ (8006800 <USB_EP0_OutStart+0xb8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d90a      	bls.n	8006782 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006778:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677c:	d101      	bne.n	8006782 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800677e:	2300      	movs	r3, #0
 8006780:	e037      	b.n	80067f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006788:	461a      	mov	r2, r3
 800678a:	2300      	movs	r3, #0
 800678c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800679c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b0:	f043 0318 	orr.w	r3, r3, #24
 80067b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80067c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d10f      	bne.n	80067f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80067ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	4f54300a 	.word	0x4f54300a

08006804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800681c:	d901      	bls.n	8006822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e01b      	b.n	800685a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	daf2      	bge.n	8006810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f043 0201 	orr.w	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006846:	d901      	bls.n	800684c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e006      	b.n	800685a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d0f0      	beq.n	800683a <USB_CoreReset+0x36>

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <UartSlave_Init>:
 */

#include "uartSlave.h"

int32_t UartSlave_Init (UartSlave_TypeDef * pInit, UartSlaveIo_TypeDef * pIoContext, uint16_t SlaveId)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	4613      	mov	r3, r2
 8006872:	80fb      	strh	r3, [r7, #6]
	RingBuffer_Init(& pInit->rxBufferManager, & pInit->pu8RxBufferRaw[0], RXBUFFERSIZE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f103 0014 	add.w	r0, r3, #20
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3324      	adds	r3, #36	@ 0x24
 800687e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006882:	4619      	mov	r1, r3
 8006884:	f7fa f940 	bl	8000b08 <RingBuffer_Init>
	pInit->u16SlaveId = SlaveId;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	801a      	strh	r2, [r3, #0]
	pInit->u32CommandMode = UARTSLAVE_COMMAND_MODE_STREAM; //UARTSLAVE_COMMAND_MODE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2202      	movs	r2, #2
 8006892:	605a      	str	r2, [r3, #4]
	pInit->pIoContext = pIoContext;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	611a      	str	r2, [r3, #16]

	return 0;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068b4:	f002 fcac 	bl	8009210 <USBD_static_malloc>
 80068b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32b0      	adds	r2, #176	@ 0xb0
 80068ca:	2100      	movs	r1, #0
 80068cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068d0:	2302      	movs	r3, #2
 80068d2:	e0d4      	b.n	8006a7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80068d8:	2100      	movs	r1, #0
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f002 fcdc 	bl	8009298 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32b0      	adds	r2, #176	@ 0xb0
 80068ea:	68f9      	ldr	r1, [r7, #12]
 80068ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32b0      	adds	r2, #176	@ 0xb0
 80068fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7c1b      	ldrb	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d138      	bne.n	800697e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800690c:	4b5e      	ldr	r3, [pc, #376]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 800690e:	7819      	ldrb	r1, [r3, #0]
 8006910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006914:	2202      	movs	r2, #2
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f002 fb57 	bl	8008fca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800691c:	4b5a      	ldr	r3, [pc, #360]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	f003 020f 	and.w	r2, r3, #15
 8006924:	6879      	ldr	r1, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	440b      	add	r3, r1
 8006930:	3324      	adds	r3, #36	@ 0x24
 8006932:	2201      	movs	r2, #1
 8006934:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006936:	4b55      	ldr	r3, [pc, #340]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006938:	7819      	ldrb	r1, [r3, #0]
 800693a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800693e:	2202      	movs	r2, #2
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f002 fb42 	bl	8008fca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006946:	4b51      	ldr	r3, [pc, #324]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800695e:	2201      	movs	r2, #1
 8006960:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006962:	4b4b      	ldr	r3, [pc, #300]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 020f 	and.w	r2, r3, #15
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	3326      	adds	r3, #38	@ 0x26
 8006978:	2210      	movs	r2, #16
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e035      	b.n	80069ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800697e:	4b42      	ldr	r3, [pc, #264]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 8006980:	7819      	ldrb	r1, [r3, #0]
 8006982:	2340      	movs	r3, #64	@ 0x40
 8006984:	2202      	movs	r2, #2
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f002 fb1f 	bl	8008fca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800698c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a88 <USBD_CDC_Init+0x1e4>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	3324      	adds	r3, #36	@ 0x24
 80069a2:	2201      	movs	r2, #1
 80069a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069a6:	4b39      	ldr	r3, [pc, #228]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 80069a8:	7819      	ldrb	r1, [r3, #0]
 80069aa:	2340      	movs	r3, #64	@ 0x40
 80069ac:	2202      	movs	r2, #2
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f002 fb0b 	bl	8008fca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069b4:	4b35      	ldr	r3, [pc, #212]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	f003 020f 	and.w	r2, r3, #15
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	440b      	add	r3, r1
 80069c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069cc:	2201      	movs	r2, #1
 80069ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3326      	adds	r3, #38	@ 0x26
 80069e6:	2210      	movs	r2, #16
 80069e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ea:	4b29      	ldr	r3, [pc, #164]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 80069ec:	7819      	ldrb	r1, [r3, #0]
 80069ee:	2308      	movs	r3, #8
 80069f0:	2203      	movs	r2, #3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f002 fae9 	bl	8008fca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069f8:	4b25      	ldr	r3, [pc, #148]	@ (8006a90 <USBD_CDC_Init+0x1ec>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	f003 020f 	and.w	r2, r3, #15
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	3324      	adds	r3, #36	@ 0x24
 8006a0e:	2201      	movs	r2, #1
 8006a10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	33b0      	adds	r3, #176	@ 0xb0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e018      	b.n	8006a7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7c1b      	ldrb	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a54:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006a56:	7819      	ldrb	r1, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f002 fba0 	bl	80091a8 <USBD_LL_PrepareReceive>
 8006a68:	e008      	b.n	8006a7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a6a:	4b08      	ldr	r3, [pc, #32]	@ (8006a8c <USBD_CDC_Init+0x1e8>)
 8006a6c:	7819      	ldrb	r1, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a74:	2340      	movs	r3, #64	@ 0x40
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f002 fb96 	bl	80091a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	2000010f 	.word	0x2000010f
 8006a8c:	20000110 	.word	0x20000110
 8006a90:	20000111 	.word	0x20000111

08006a94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8006b8c <USBD_CDC_DeInit+0xf8>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f002 fab5 	bl	8009016 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006aac:	4b37      	ldr	r3, [pc, #220]	@ (8006b8c <USBD_CDC_DeInit+0xf8>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	3324      	adds	r3, #36	@ 0x24
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006ac6:	4b32      	ldr	r3, [pc, #200]	@ (8006b90 <USBD_CDC_DeInit+0xfc>)
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f002 faa2 	bl	8009016 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8006b90 <USBD_CDC_DeInit+0xfc>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f003 020f 	and.w	r2, r3, #15
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aea:	2200      	movs	r2, #0
 8006aec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006aee:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <USBD_CDC_DeInit+0x100>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f002 fa8e 	bl	8009016 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006afa:	4b26      	ldr	r3, [pc, #152]	@ (8006b94 <USBD_CDC_DeInit+0x100>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 020f 	and.w	r2, r3, #15
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3324      	adds	r3, #36	@ 0x24
 8006b10:	2200      	movs	r2, #0
 8006b12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b14:	4b1f      	ldr	r3, [pc, #124]	@ (8006b94 <USBD_CDC_DeInit+0x100>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	3326      	adds	r3, #38	@ 0x26
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	32b0      	adds	r2, #176	@ 0xb0
 8006b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01f      	beq.n	8006b80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	33b0      	adds	r3, #176	@ 0xb0
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	4413      	add	r3, r2
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	32b0      	adds	r2, #176	@ 0xb0
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f002 fb62 	bl	800922c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	32b0      	adds	r2, #176	@ 0xb0
 8006b72:	2100      	movs	r1, #0
 8006b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	2000010f 	.word	0x2000010f
 8006b90:	20000110 	.word	0x20000110
 8006b94:	20000111 	.word	0x20000111

08006b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	@ 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e0bf      	b.n	8006d48 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d050      	beq.n	8006c76 <USBD_CDC_Setup+0xde>
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	f040 80af 	bne.w	8006d38 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	88db      	ldrh	r3, [r3, #6]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d03a      	beq.n	8006c58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b25b      	sxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	da1b      	bge.n	8006c24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	33b0      	adds	r3, #176	@ 0xb0
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	88d2      	ldrh	r2, [r2, #6]
 8006c08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	88db      	ldrh	r3, [r3, #6]
 8006c0e:	2b07      	cmp	r3, #7
 8006c10:	bf28      	it	cs
 8006c12:	2307      	movcs	r3, #7
 8006c14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	89fa      	ldrh	r2, [r7, #14]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 fd93 	bl	8008748 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c22:	e090      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785a      	ldrb	r2, [r3, #1]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	88db      	ldrh	r3, [r3, #6]
 8006c32:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c34:	d803      	bhi.n	8006c3e <USBD_CDC_Setup+0xa6>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	88db      	ldrh	r3, [r3, #6]
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	e000      	b.n	8006c40 <USBD_CDC_Setup+0xa8>
 8006c3e:	2240      	movs	r2, #64	@ 0x40
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c46:	6939      	ldr	r1, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f001 fda5 	bl	80087a0 <USBD_CtlPrepareRx>
      break;
 8006c56:	e076      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	33b0      	adds	r3, #176	@ 0xb0
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	7850      	ldrb	r0, [r2, #1]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	4798      	blx	r3
      break;
 8006c74:	e067      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	2b0b      	cmp	r3, #11
 8006c7c:	d851      	bhi.n	8006d22 <USBD_CDC_Setup+0x18a>
 8006c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <USBD_CDC_Setup+0xec>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006d31 	.word	0x08006d31
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006d23 	.word	0x08006d23
 8006c94:	08006d23 	.word	0x08006d23
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d23 	.word	0x08006d23
 8006ca0:	08006d23 	.word	0x08006d23
 8006ca4:	08006d23 	.word	0x08006d23
 8006ca8:	08006d23 	.word	0x08006d23
 8006cac:	08006cdf 	.word	0x08006cdf
 8006cb0:	08006d09 	.word	0x08006d09
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d107      	bne.n	8006cd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cc0:	f107 030a 	add.w	r3, r7, #10
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fd3d 	bl	8008748 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cce:	e032      	b.n	8006d36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 fcbb 	bl	800864e <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	75fb      	strb	r3, [r7, #23]
          break;
 8006cdc:	e02b      	b.n	8006d36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d107      	bne.n	8006cfa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cea:	f107 030d 	add.w	r3, r7, #13
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fd28 	bl	8008748 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cf8:	e01d      	b.n	8006d36 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 fca6 	bl	800864e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	75fb      	strb	r3, [r7, #23]
          break;
 8006d06:	e016      	b.n	8006d36 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d00f      	beq.n	8006d34 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f001 fc99 	bl	800864e <USBD_CtlError>
            ret = USBD_FAIL;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d20:	e008      	b.n	8006d34 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fc92 	bl	800864e <USBD_CtlError>
          ret = USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2e:	e002      	b.n	8006d36 <USBD_CDC_Setup+0x19e>
          break;
 8006d30:	bf00      	nop
 8006d32:	e008      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>
          break;
 8006d34:	bf00      	nop
      }
      break;
 8006d36:	e006      	b.n	8006d46 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fc87 	bl	800864e <USBD_CtlError>
      ret = USBD_FAIL;
 8006d40:	2303      	movs	r3, #3
 8006d42:	75fb      	strb	r3, [r7, #23]
      break;
 8006d44:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	32b0      	adds	r2, #176	@ 0xb0
 8006d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e065      	b.n	8006e46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32b0      	adds	r2, #176	@ 0xb0
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	f003 020f 	and.w	r2, r3, #15
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	440b      	add	r3, r1
 8006d9c:	3318      	adds	r3, #24
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02f      	beq.n	8006e04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3318      	adds	r3, #24
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	f003 010f 	and.w	r1, r3, #15
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	440b      	add	r3, r1
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4403      	add	r3, r0
 8006dcc:	331c      	adds	r3, #28
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dd4:	fb01 f303 	mul.w	r3, r1, r3
 8006dd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d112      	bne.n	8006e04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	f003 020f 	and.w	r2, r3, #15
 8006de4:	6879      	ldr	r1, [r7, #4]
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	3318      	adds	r3, #24
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006df6:	78f9      	ldrb	r1, [r7, #3]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f002 f9b2 	bl	8009166 <USBD_LL_Transmit>
 8006e02:	e01f      	b.n	8006e44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	33b0      	adds	r3, #176	@ 0xb0
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	33b0      	adds	r3, #176	@ 0xb0
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32b0      	adds	r2, #176	@ 0xb0
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	32b0      	adds	r2, #176	@ 0xb0
 8006e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e01a      	b.n	8006eb6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f002 f9b0 	bl	80091ea <USBD_LL_GetRxDataSize>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	33b0      	adds	r3, #176	@ 0xb0
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	32b0      	adds	r2, #176	@ 0xb0
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e024      	b.n	8006f2a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	33b0      	adds	r3, #176	@ 0xb0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d019      	beq.n	8006f28 <USBD_CDC_EP0_RxReady+0x6a>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006efa:	2bff      	cmp	r3, #255	@ 0xff
 8006efc:	d014      	beq.n	8006f28 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	33b0      	adds	r3, #176	@ 0xb0
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	22ff      	movs	r2, #255	@ 0xff
 8006f24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f3c:	2182      	movs	r1, #130	@ 0x82
 8006f3e:	4818      	ldr	r0, [pc, #96]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f40:	f000 fd4f 	bl	80079e2 <USBD_GetEpDesc>
 8006f44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f46:	2101      	movs	r1, #1
 8006f48:	4815      	ldr	r0, [pc, #84]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f4a:	f000 fd4a 	bl	80079e2 <USBD_GetEpDesc>
 8006f4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f50:	2181      	movs	r1, #129	@ 0x81
 8006f52:	4813      	ldr	r0, [pc, #76]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f54:	f000 fd45 	bl	80079e2 <USBD_GetEpDesc>
 8006f58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2210      	movs	r2, #16
 8006f64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d006      	beq.n	8006f7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f74:	711a      	strb	r2, [r3, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d006      	beq.n	8006f8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f88:	711a      	strb	r2, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2243      	movs	r2, #67	@ 0x43
 8006f92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f94:	4b02      	ldr	r3, [pc, #8]	@ (8006fa0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	200000cc 	.word	0x200000cc

08006fa4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fac:	2182      	movs	r1, #130	@ 0x82
 8006fae:	4818      	ldr	r0, [pc, #96]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fb0:	f000 fd17 	bl	80079e2 <USBD_GetEpDesc>
 8006fb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	4815      	ldr	r0, [pc, #84]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fba:	f000 fd12 	bl	80079e2 <USBD_GetEpDesc>
 8006fbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fc0:	2181      	movs	r1, #129	@ 0x81
 8006fc2:	4813      	ldr	r0, [pc, #76]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fc4:	f000 fd0d 	bl	80079e2 <USBD_GetEpDesc>
 8006fc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d006      	beq.n	8006fea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	711a      	strb	r2, [r3, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f042 0202 	orr.w	r2, r2, #2
 8006fe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	711a      	strb	r2, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f042 0202 	orr.w	r2, r2, #2
 8006ffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2243      	movs	r2, #67	@ 0x43
 8007002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007004:	4b02      	ldr	r3, [pc, #8]	@ (8007010 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	200000cc 	.word	0x200000cc

08007014 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800701c:	2182      	movs	r1, #130	@ 0x82
 800701e:	4818      	ldr	r0, [pc, #96]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007020:	f000 fcdf 	bl	80079e2 <USBD_GetEpDesc>
 8007024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007026:	2101      	movs	r1, #1
 8007028:	4815      	ldr	r0, [pc, #84]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800702a:	f000 fcda 	bl	80079e2 <USBD_GetEpDesc>
 800702e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007030:	2181      	movs	r1, #129	@ 0x81
 8007032:	4813      	ldr	r0, [pc, #76]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007034:	f000 fcd5 	bl	80079e2 <USBD_GetEpDesc>
 8007038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2210      	movs	r2, #16
 8007044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	2200      	movs	r2, #0
 8007050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007054:	711a      	strb	r2, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d006      	beq.n	800706e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007068:	711a      	strb	r2, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2243      	movs	r2, #67	@ 0x43
 8007072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007074:	4b02      	ldr	r3, [pc, #8]	@ (8007080 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200000cc 	.word	0x200000cc

08007084 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	220a      	movs	r2, #10
 8007090:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	@ (80070a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	20000088 	.word	0x20000088

080070a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e009      	b.n	80070cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	33b0      	adds	r3, #176	@ 0xb0
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	32b0      	adds	r2, #176	@ 0xb0
 80070ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e008      	b.n	8007110 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	32b0      	adds	r2, #176	@ 0xb0
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800713c:	2303      	movs	r3, #3
 800713e:	e004      	b.n	800714a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
	...

08007158 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	32b0      	adds	r2, #176	@ 0xb0
 800716a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007170:	2301      	movs	r3, #1
 8007172:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800717a:	2303      	movs	r3, #3
 800717c:	e025      	b.n	80071ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007184:	2b00      	cmp	r3, #0
 8007186:	d11f      	bne.n	80071c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2201      	movs	r2, #1
 800718c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007190:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <USBD_CDC_TransmitPacket+0x7c>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f003 020f 	and.w	r2, r3, #15
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4403      	add	r3, r0
 80071aa:	3318      	adds	r3, #24
 80071ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <USBD_CDC_TransmitPacket+0x7c>)
 80071b0:	7819      	ldrb	r1, [r3, #0]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 ffd1 	bl	8009166 <USBD_LL_Transmit>

    ret = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	2000010f 	.word	0x2000010f

080071d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	32b0      	adds	r2, #176	@ 0xb0
 80071ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	32b0      	adds	r2, #176	@ 0xb0
 80071fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007202:	2303      	movs	r3, #3
 8007204:	e018      	b.n	8007238 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	7c1b      	ldrb	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10a      	bne.n	8007224 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800720e:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <USBD_CDC_ReceivePacket+0x68>)
 8007210:	7819      	ldrb	r1, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007218:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 ffc3 	bl	80091a8 <USBD_LL_PrepareReceive>
 8007222:	e008      	b.n	8007236 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007224:	4b06      	ldr	r3, [pc, #24]	@ (8007240 <USBD_CDC_ReceivePacket+0x68>)
 8007226:	7819      	ldrb	r1, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800722e:	2340      	movs	r3, #64	@ 0x40
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 ffb9 	bl	80091a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000110 	.word	0x20000110

08007244 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007258:	2303      	movs	r3, #3
 800725a:	e01f      	b.n	800729c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	79fa      	ldrb	r2, [r7, #7]
 800728e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f001 fe33 	bl	8008efc <USBD_LL_Init>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]

  return ret;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072b8:	2303      	movs	r3, #3
 80072ba:	e025      	b.n	8007308 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	32ae      	adds	r2, #174	@ 0xae
 80072ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00f      	beq.n	80072f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	32ae      	adds	r2, #174	@ 0xae
 80072e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	f107 020e 	add.w	r2, r7, #14
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	4602      	mov	r2, r0
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 fe3b 	bl	8008f94 <USBD_LL_Start>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d009      	beq.n	800736c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4611      	mov	r1, r2
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
 8007368:	4603      	mov	r3, r0
 800736a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
 800737e:	460b      	mov	r3, r1
 8007380:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	4611      	mov	r1, r2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	4798      	blx	r3
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 f90c 	bl	80085da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073de:	f003 031f 	and.w	r3, r3, #31
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d01a      	beq.n	800741c <USBD_LL_SetupStage+0x72>
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d822      	bhi.n	8007430 <USBD_LL_SetupStage+0x86>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <USBD_LL_SetupStage+0x4a>
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d00a      	beq.n	8007408 <USBD_LL_SetupStage+0x5e>
 80073f2:	e01d      	b.n	8007430 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb63 	bl	8007ac8 <USBD_StdDevReq>
 8007402:	4603      	mov	r3, r0
 8007404:	73fb      	strb	r3, [r7, #15]
      break;
 8007406:	e020      	b.n	800744a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fbcb 	bl	8007bac <USBD_StdItfReq>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]
      break;
 800741a:	e016      	b.n	800744a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fc2d 	bl	8007c84 <USBD_StdEPReq>
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
      break;
 800742e:	e00c      	b.n	800744a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007436:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800743a:	b2db      	uxtb	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fe08 	bl	8009054 <USBD_LL_StallEP>
 8007444:	4603      	mov	r3, r0
 8007446:	73fb      	strb	r3, [r7, #15]
      break;
 8007448:	bf00      	nop
  }

  return ret;
 800744a:	7bfb      	ldrb	r3, [r7, #15]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	460b      	mov	r3, r1
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007466:	7afb      	ldrb	r3, [r7, #11]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d16e      	bne.n	800754a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007472:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800747a:	2b03      	cmp	r3, #3
 800747c:	f040 8098 	bne.w	80075b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	429a      	cmp	r2, r3
 800748a:	d913      	bls.n	80074b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	689a      	ldr	r2, [r3, #8]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	1ad2      	subs	r2, r2, r3
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4293      	cmp	r3, r2
 80074a4:	bf28      	it	cs
 80074a6:	4613      	movcs	r3, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f001 f994 	bl	80087da <USBD_CtlContinueRx>
 80074b2:	e07d      	b.n	80075b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d014      	beq.n	80074ec <USBD_LL_DataOutStage+0x98>
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d81d      	bhi.n	8007502 <USBD_LL_DataOutStage+0xae>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <USBD_LL_DataOutStage+0x7c>
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d003      	beq.n	80074d6 <USBD_LL_DataOutStage+0x82>
 80074ce:	e018      	b.n	8007502 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	75bb      	strb	r3, [r7, #22]
            break;
 80074d4:	e018      	b.n	8007508 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	4619      	mov	r1, r3
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fa64 	bl	80079ae <USBD_CoreFindIF>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75bb      	strb	r3, [r7, #22]
            break;
 80074ea:	e00d      	b.n	8007508 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	4619      	mov	r1, r3
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fa66 	bl	80079c8 <USBD_CoreFindEP>
 80074fc:	4603      	mov	r3, r0
 80074fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007500:	e002      	b.n	8007508 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	75bb      	strb	r3, [r7, #22]
            break;
 8007506:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007508:	7dbb      	ldrb	r3, [r7, #22]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d119      	bne.n	8007542 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b03      	cmp	r3, #3
 8007518:	d113      	bne.n	8007542 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800751a:	7dba      	ldrb	r2, [r7, #22]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	32ae      	adds	r2, #174	@ 0xae
 8007520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00b      	beq.n	8007542 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800752a:	7dba      	ldrb	r2, [r7, #22]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007532:	7dba      	ldrb	r2, [r7, #22]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	32ae      	adds	r2, #174	@ 0xae
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 f95a 	bl	80087fc <USBD_CtlSendStatus>
 8007548:	e032      	b.n	80075b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007550:	b2db      	uxtb	r3, r3
 8007552:	4619      	mov	r1, r3
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fa37 	bl	80079c8 <USBD_CoreFindEP>
 800755a:	4603      	mov	r3, r0
 800755c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800755e:	7dbb      	ldrb	r3, [r7, #22]
 8007560:	2bff      	cmp	r3, #255	@ 0xff
 8007562:	d025      	beq.n	80075b0 <USBD_LL_DataOutStage+0x15c>
 8007564:	7dbb      	ldrb	r3, [r7, #22]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d122      	bne.n	80075b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b03      	cmp	r3, #3
 8007574:	d117      	bne.n	80075a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007576:	7dba      	ldrb	r2, [r7, #22]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	32ae      	adds	r2, #174	@ 0xae
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00f      	beq.n	80075a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007586:	7dba      	ldrb	r2, [r7, #22]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800758e:	7dba      	ldrb	r2, [r7, #22]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	32ae      	adds	r2, #174	@ 0xae
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	7afa      	ldrb	r2, [r7, #11]
 800759c:	4611      	mov	r1, r2
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	4798      	blx	r3
 80075a2:	4603      	mov	r3, r0
 80075a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	e000      	b.n	80075b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b086      	sub	sp, #24
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	460b      	mov	r3, r1
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d16f      	bne.n	80076ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3314      	adds	r3, #20
 80075d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d15a      	bne.n	8007694 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d914      	bls.n	8007614 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	1ad2      	subs	r2, r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	461a      	mov	r2, r3
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f001 f8bc 	bl	800877e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007606:	2300      	movs	r3, #0
 8007608:	2200      	movs	r2, #0
 800760a:	2100      	movs	r1, #0
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f001 fdcb 	bl	80091a8 <USBD_LL_PrepareReceive>
 8007612:	e03f      	b.n	8007694 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	d11c      	bne.n	800765a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007628:	429a      	cmp	r2, r3
 800762a:	d316      	bcc.n	800765a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007636:	429a      	cmp	r2, r3
 8007638:	d20f      	bcs.n	800765a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800763a:	2200      	movs	r2, #0
 800763c:	2100      	movs	r1, #0
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f001 f89d 	bl	800877e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800764c:	2300      	movs	r3, #0
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f001 fda8 	bl	80091a8 <USBD_LL_PrepareReceive>
 8007658:	e01c      	b.n	8007694 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b03      	cmp	r3, #3
 8007664:	d10f      	bne.n	8007686 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007686:	2180      	movs	r1, #128	@ 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f001 fce3 	bl	8009054 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f001 f8c7 	bl	8008822 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d03a      	beq.n	8007714 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fe42 	bl	8007328 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076ac:	e032      	b.n	8007714 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	4619      	mov	r1, r3
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f985 	bl	80079c8 <USBD_CoreFindEP>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	2bff      	cmp	r3, #255	@ 0xff
 80076c6:	d025      	beq.n	8007714 <USBD_LL_DataInStage+0x15a>
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d122      	bne.n	8007714 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d11c      	bne.n	8007714 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076da:	7dfa      	ldrb	r2, [r7, #23]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	32ae      	adds	r2, #174	@ 0xae
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d014      	beq.n	8007714 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80076ea:	7dfa      	ldrb	r2, [r7, #23]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076f2:	7dfa      	ldrb	r2, [r7, #23]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	32ae      	adds	r2, #174	@ 0xae
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	7afa      	ldrb	r2, [r7, #11]
 8007700:	4611      	mov	r1, r2
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	4798      	blx	r3
 8007706:	4603      	mov	r3, r0
 8007708:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800770a:	7dbb      	ldrb	r3, [r7, #22]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007710:	7dbb      	ldrb	r3, [r7, #22]
 8007712:	e000      	b.n	8007716 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007756:	2b00      	cmp	r3, #0
 8007758:	d014      	beq.n	8007784 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6852      	ldr	r2, [r2, #4]
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	4611      	mov	r1, r2
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007780:	2303      	movs	r3, #3
 8007782:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007784:	2340      	movs	r3, #64	@ 0x40
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fc1d 	bl	8008fca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2240      	movs	r2, #64	@ 0x40
 800779c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077a0:	2340      	movs	r3, #64	@ 0x40
 80077a2:	2200      	movs	r2, #0
 80077a4:	2180      	movs	r1, #128	@ 0x80
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f001 fc0f 	bl	8008fca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2240      	movs	r2, #64	@ 0x40
 80077b6:	621a      	str	r2, [r3, #32]

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d006      	beq.n	8007804 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800781a:	b480      	push	{r7}
 800781c:	b083      	sub	sp, #12
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2b04      	cmp	r3, #4
 800782c:	d106      	bne.n	800783c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007834:	b2da      	uxtb	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b03      	cmp	r3, #3
 800785c:	d110      	bne.n	8007880 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d005      	beq.n	8007880 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	32ae      	adds	r2, #174	@ 0xae
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e01c      	b.n	80078e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d115      	bne.n	80078e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	32ae      	adds	r2, #174	@ 0xae
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32ae      	adds	r2, #174	@ 0xae
 80078d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	4611      	mov	r1, r2
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	32ae      	adds	r2, #174	@ 0xae
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800790c:	2303      	movs	r3, #3
 800790e:	e01c      	b.n	800794a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b03      	cmp	r3, #3
 800791a:	d115      	bne.n	8007948 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	32ae      	adds	r2, #174	@ 0xae
 8007926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	32ae      	adds	r2, #174	@ 0xae
 800793a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800793e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007940:	78fa      	ldrb	r2, [r7, #3]
 8007942:	4611      	mov	r1, r2
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	6852      	ldr	r2, [r2, #4]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	4611      	mov	r1, r2
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	460b      	mov	r3, r1
 80079b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	885b      	ldrh	r3, [r3, #2]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d91f      	bls.n	8007a48 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a0e:	e013      	b.n	8007a38 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a10:	f107 030a 	add.w	r3, r7, #10
 8007a14:	4619      	mov	r1, r3
 8007a16:	6978      	ldr	r0, [r7, #20]
 8007a18:	f000 f81b 	bl	8007a52 <USBD_GetNextDesc>
 8007a1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	785b      	ldrb	r3, [r3, #1]
 8007a22:	2b05      	cmp	r3, #5
 8007a24:	d108      	bne.n	8007a38 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	789b      	ldrb	r3, [r3, #2]
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d008      	beq.n	8007a46 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	897b      	ldrh	r3, [r7, #10]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d8e5      	bhi.n	8007a10 <USBD_GetEpDesc+0x2e>
 8007a44:	e000      	b.n	8007a48 <USBD_GetEpDesc+0x66>
          break;
 8007a46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a48:	693b      	ldr	r3, [r7, #16]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	7812      	ldrb	r2, [r2, #0]
 8007a68:	4413      	add	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aa8:	8a3b      	ldrh	r3, [r7, #16]
 8007aaa:	021b      	lsls	r3, r3, #8
 8007aac:	b21a      	sxth	r2, r3
 8007aae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b21b      	sxth	r3, r3
 8007ab6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
	...

08007ac8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ade:	2b40      	cmp	r3, #64	@ 0x40
 8007ae0:	d005      	beq.n	8007aee <USBD_StdDevReq+0x26>
 8007ae2:	2b40      	cmp	r3, #64	@ 0x40
 8007ae4:	d857      	bhi.n	8007b96 <USBD_StdDevReq+0xce>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00f      	beq.n	8007b0a <USBD_StdDevReq+0x42>
 8007aea:	2b20      	cmp	r3, #32
 8007aec:	d153      	bne.n	8007b96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	32ae      	adds	r2, #174	@ 0xae
 8007af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	4798      	blx	r3
 8007b04:	4603      	mov	r3, r0
 8007b06:	73fb      	strb	r3, [r7, #15]
      break;
 8007b08:	e04a      	b.n	8007ba0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	785b      	ldrb	r3, [r3, #1]
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d83b      	bhi.n	8007b8a <USBD_StdDevReq+0xc2>
 8007b12:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <USBD_StdDevReq+0x50>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007b81 	.word	0x08007b81
 8007b20:	08007b8b 	.word	0x08007b8b
 8007b24:	08007b77 	.word	0x08007b77
 8007b28:	08007b8b 	.word	0x08007b8b
 8007b2c:	08007b4b 	.word	0x08007b4b
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b8b 	.word	0x08007b8b
 8007b38:	08007b63 	.word	0x08007b63
 8007b3c:	08007b55 	.word	0x08007b55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa3c 	bl	8007fc0 <USBD_GetDescriptor>
          break;
 8007b48:	e024      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fba1 	bl	8008294 <USBD_SetAddress>
          break;
 8007b52:	e01f      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fbe0 	bl	800831c <USBD_SetConfig>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8007b60:	e018      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fc83 	bl	8008470 <USBD_GetConfig>
          break;
 8007b6a:	e013      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fcb4 	bl	80084dc <USBD_GetStatus>
          break;
 8007b74:	e00e      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fce3 	bl	8008544 <USBD_SetFeature>
          break;
 8007b7e:	e009      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fd07 	bl	8008596 <USBD_ClrFeature>
          break;
 8007b88:	e004      	b.n	8007b94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fd5e 	bl	800864e <USBD_CtlError>
          break;
 8007b92:	bf00      	nop
      }
      break;
 8007b94:	e004      	b.n	8007ba0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b96:	6839      	ldr	r1, [r7, #0]
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fd58 	bl	800864e <USBD_CtlError>
      break;
 8007b9e:	bf00      	nop
  }

  return ret;
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop

08007bac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bc2:	2b40      	cmp	r3, #64	@ 0x40
 8007bc4:	d005      	beq.n	8007bd2 <USBD_StdItfReq+0x26>
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d852      	bhi.n	8007c70 <USBD_StdItfReq+0xc4>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <USBD_StdItfReq+0x26>
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d14e      	bne.n	8007c70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d840      	bhi.n	8007c62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	889b      	ldrh	r3, [r3, #4]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d836      	bhi.n	8007c58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	889b      	ldrh	r3, [r3, #4]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7ff fedb 	bl	80079ae <USBD_CoreFindIF>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2bff      	cmp	r3, #255	@ 0xff
 8007c00:	d01d      	beq.n	8007c3e <USBD_StdItfReq+0x92>
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d11a      	bne.n	8007c3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c08:	7bba      	ldrb	r2, [r7, #14]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	32ae      	adds	r2, #174	@ 0xae
 8007c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00f      	beq.n	8007c38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c18:	7bba      	ldrb	r2, [r7, #14]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c20:	7bba      	ldrb	r2, [r7, #14]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	32ae      	adds	r2, #174	@ 0xae
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c36:	e004      	b.n	8007c42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c3c:	e001      	b.n	8007c42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	88db      	ldrh	r3, [r3, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d110      	bne.n	8007c6c <USBD_StdItfReq+0xc0>
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10d      	bne.n	8007c6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fdd3 	bl	80087fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c56:	e009      	b.n	8007c6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fcf7 	bl	800864e <USBD_CtlError>
          break;
 8007c60:	e004      	b.n	8007c6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fcf2 	bl	800864e <USBD_CtlError>
          break;
 8007c6a:	e000      	b.n	8007c6e <USBD_StdItfReq+0xc2>
          break;
 8007c6c:	bf00      	nop
      }
      break;
 8007c6e:	e004      	b.n	8007c7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fceb 	bl	800864e <USBD_CtlError>
      break;
 8007c78:	bf00      	nop
  }

  return ret;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	889b      	ldrh	r3, [r3, #4]
 8007c96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d007      	beq.n	8007cb4 <USBD_StdEPReq+0x30>
 8007ca4:	2b40      	cmp	r3, #64	@ 0x40
 8007ca6:	f200 817f 	bhi.w	8007fa8 <USBD_StdEPReq+0x324>
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d02a      	beq.n	8007d04 <USBD_StdEPReq+0x80>
 8007cae:	2b20      	cmp	r3, #32
 8007cb0:	f040 817a 	bne.w	8007fa8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cb4:	7bbb      	ldrb	r3, [r7, #14]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fe85 	bl	80079c8 <USBD_CoreFindEP>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc2:	7b7b      	ldrb	r3, [r7, #13]
 8007cc4:	2bff      	cmp	r3, #255	@ 0xff
 8007cc6:	f000 8174 	beq.w	8007fb2 <USBD_StdEPReq+0x32e>
 8007cca:	7b7b      	ldrb	r3, [r7, #13]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8170 	bne.w	8007fb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007cd2:	7b7a      	ldrb	r2, [r7, #13]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cda:	7b7a      	ldrb	r2, [r7, #13]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	32ae      	adds	r2, #174	@ 0xae
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8163 	beq.w	8007fb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007cec:	7b7a      	ldrb	r2, [r7, #13]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	32ae      	adds	r2, #174	@ 0xae
 8007cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d02:	e156      	b.n	8007fb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d008      	beq.n	8007d1e <USBD_StdEPReq+0x9a>
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	f300 8145 	bgt.w	8007f9c <USBD_StdEPReq+0x318>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 809b 	beq.w	8007e4e <USBD_StdEPReq+0x1ca>
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d03c      	beq.n	8007d96 <USBD_StdEPReq+0x112>
 8007d1c:	e13e      	b.n	8007f9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d002      	beq.n	8007d30 <USBD_StdEPReq+0xac>
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d016      	beq.n	8007d5c <USBD_StdEPReq+0xd8>
 8007d2e:	e02c      	b.n	8007d8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00d      	beq.n	8007d52 <USBD_StdEPReq+0xce>
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b80      	cmp	r3, #128	@ 0x80
 8007d3a:	d00a      	beq.n	8007d52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 f987 	bl	8009054 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d46:	2180      	movs	r1, #128	@ 0x80
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f001 f983 	bl	8009054 <USBD_LL_StallEP>
 8007d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d50:	e020      	b.n	8007d94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fc7a 	bl	800864e <USBD_CtlError>
              break;
 8007d5a:	e01b      	b.n	8007d94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	885b      	ldrh	r3, [r3, #2]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10e      	bne.n	8007d82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d64:	7bbb      	ldrb	r3, [r7, #14]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00b      	beq.n	8007d82 <USBD_StdEPReq+0xfe>
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b80      	cmp	r3, #128	@ 0x80
 8007d6e:	d008      	beq.n	8007d82 <USBD_StdEPReq+0xfe>
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	88db      	ldrh	r3, [r3, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f001 f969 	bl	8009054 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fd3a 	bl	80087fc <USBD_CtlSendStatus>

              break;
 8007d88:	e004      	b.n	8007d94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc5e 	bl	800864e <USBD_CtlError>
              break;
 8007d92:	bf00      	nop
          }
          break;
 8007d94:	e107      	b.n	8007fa6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d002      	beq.n	8007da8 <USBD_StdEPReq+0x124>
 8007da2:	2b03      	cmp	r3, #3
 8007da4:	d016      	beq.n	8007dd4 <USBD_StdEPReq+0x150>
 8007da6:	e04b      	b.n	8007e40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <USBD_StdEPReq+0x146>
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b80      	cmp	r3, #128	@ 0x80
 8007db2:	d00a      	beq.n	8007dca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 f94b 	bl	8009054 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dbe:	2180      	movs	r1, #128	@ 0x80
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 f947 	bl	8009054 <USBD_LL_StallEP>
 8007dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dc8:	e040      	b.n	8007e4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fc3e 	bl	800864e <USBD_CtlError>
              break;
 8007dd2:	e03b      	b.n	8007e4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	885b      	ldrh	r3, [r3, #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d136      	bne.n	8007e4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 f951 	bl	8009092 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fd03 	bl	80087fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff fde4 	bl	80079c8 <USBD_CoreFindEP>
 8007e00:	4603      	mov	r3, r0
 8007e02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e04:	7b7b      	ldrb	r3, [r7, #13]
 8007e06:	2bff      	cmp	r3, #255	@ 0xff
 8007e08:	d01f      	beq.n	8007e4a <USBD_StdEPReq+0x1c6>
 8007e0a:	7b7b      	ldrb	r3, [r7, #13]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d11c      	bne.n	8007e4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e10:	7b7a      	ldrb	r2, [r7, #13]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e18:	7b7a      	ldrb	r2, [r7, #13]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32ae      	adds	r2, #174	@ 0xae
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d010      	beq.n	8007e4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e28:	7b7a      	ldrb	r2, [r7, #13]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	32ae      	adds	r2, #174	@ 0xae
 8007e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e3e:	e004      	b.n	8007e4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fc03 	bl	800864e <USBD_CtlError>
              break;
 8007e48:	e000      	b.n	8007e4c <USBD_StdEPReq+0x1c8>
              break;
 8007e4a:	bf00      	nop
          }
          break;
 8007e4c:	e0ab      	b.n	8007fa6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d002      	beq.n	8007e60 <USBD_StdEPReq+0x1dc>
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d032      	beq.n	8007ec4 <USBD_StdEPReq+0x240>
 8007e5e:	e097      	b.n	8007f90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d007      	beq.n	8007e76 <USBD_StdEPReq+0x1f2>
 8007e66:	7bbb      	ldrb	r3, [r7, #14]
 8007e68:	2b80      	cmp	r3, #128	@ 0x80
 8007e6a:	d004      	beq.n	8007e76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fbed 	bl	800864e <USBD_CtlError>
                break;
 8007e74:	e091      	b.n	8007f9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da0b      	bge.n	8007e96 <USBD_StdEPReq+0x212>
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e84:	4613      	mov	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4413      	add	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	3310      	adds	r3, #16
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	3304      	adds	r3, #4
 8007e94:	e00b      	b.n	8007eae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4413      	add	r3, r2
 8007eac:	3304      	adds	r3, #4
 8007eae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fc43 	bl	8008748 <USBD_CtlSendData>
              break;
 8007ec2:	e06a      	b.n	8007f9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	da11      	bge.n	8007ef0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	f003 020f 	and.w	r2, r3, #15
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	440b      	add	r3, r1
 8007ede:	3324      	adds	r3, #36	@ 0x24
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d117      	bne.n	8007f16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ee6:	6839      	ldr	r1, [r7, #0]
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fbb0 	bl	800864e <USBD_CtlError>
                  break;
 8007eee:	e054      	b.n	8007f9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	f003 020f 	and.w	r2, r3, #15
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fb9d 	bl	800864e <USBD_CtlError>
                  break;
 8007f14:	e041      	b.n	8007f9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da0b      	bge.n	8007f36 <USBD_StdEPReq+0x2b2>
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	3304      	adds	r3, #4
 8007f34:	e00b      	b.n	8007f4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <USBD_StdEPReq+0x2d8>
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	2b80      	cmp	r3, #128	@ 0x80
 8007f5a:	d103      	bne.n	8007f64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e00e      	b.n	8007f82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f8b1 	bl	80090d0 <USBD_LL_IsStallEP>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d003      	beq.n	8007f7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2201      	movs	r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2202      	movs	r2, #2
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fbdd 	bl	8008748 <USBD_CtlSendData>
              break;
 8007f8e:	e004      	b.n	8007f9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fb5b 	bl	800864e <USBD_CtlError>
              break;
 8007f98:	bf00      	nop
          }
          break;
 8007f9a:	e004      	b.n	8007fa6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fb55 	bl	800864e <USBD_CtlError>
          break;
 8007fa4:	bf00      	nop
      }
      break;
 8007fa6:	e005      	b.n	8007fb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fb4f 	bl	800864e <USBD_CtlError>
      break;
 8007fb0:	e000      	b.n	8007fb4 <USBD_StdEPReq+0x330>
      break;
 8007fb2:	bf00      	nop
  }

  return ret;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	2b06      	cmp	r3, #6
 8007fe2:	f200 8128 	bhi.w	8008236 <USBD_GetDescriptor+0x276>
 8007fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <USBD_GetDescriptor+0x2c>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	08008021 	.word	0x08008021
 8007ff4:	08008061 	.word	0x08008061
 8007ff8:	08008237 	.word	0x08008237
 8007ffc:	08008237 	.word	0x08008237
 8008000:	080081d7 	.word	0x080081d7
 8008004:	08008203 	.word	0x08008203
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
      break;
 800801e:	e112      	b.n	8008246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	7c1b      	ldrb	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10d      	bne.n	8008044 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	f107 0208 	add.w	r2, r7, #8
 8008034:	4610      	mov	r0, r2
 8008036:	4798      	blx	r3
 8008038:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	2202      	movs	r2, #2
 8008040:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008042:	e100      	b.n	8008246 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	f107 0208 	add.w	r2, r7, #8
 8008050:	4610      	mov	r0, r2
 8008052:	4798      	blx	r3
 8008054:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	3301      	adds	r3, #1
 800805a:	2202      	movs	r2, #2
 800805c:	701a      	strb	r2, [r3, #0]
      break;
 800805e:	e0f2      	b.n	8008246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	885b      	ldrh	r3, [r3, #2]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b05      	cmp	r3, #5
 8008068:	f200 80ac 	bhi.w	80081c4 <USBD_GetDescriptor+0x204>
 800806c:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <USBD_GetDescriptor+0xb4>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	0800808d 	.word	0x0800808d
 8008078:	080080c1 	.word	0x080080c1
 800807c:	080080f5 	.word	0x080080f5
 8008080:	08008129 	.word	0x08008129
 8008084:	0800815d 	.word	0x0800815d
 8008088:	08008191 	.word	0x08008191
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7c12      	ldrb	r2, [r2, #16]
 80080a4:	f107 0108 	add.w	r1, r7, #8
 80080a8:	4610      	mov	r0, r2
 80080aa:	4798      	blx	r3
 80080ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ae:	e091      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b0:	6839      	ldr	r1, [r7, #0]
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 facb 	bl	800864e <USBD_CtlError>
            err++;
 80080b8:	7afb      	ldrb	r3, [r7, #11]
 80080ba:	3301      	adds	r3, #1
 80080bc:	72fb      	strb	r3, [r7, #11]
          break;
 80080be:	e089      	b.n	80081d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00b      	beq.n	80080e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
 80080d8:	f107 0108 	add.w	r1, r7, #8
 80080dc:	4610      	mov	r0, r2
 80080de:	4798      	blx	r3
 80080e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080e2:	e077      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fab1 	bl	800864e <USBD_CtlError>
            err++;
 80080ec:	7afb      	ldrb	r3, [r7, #11]
 80080ee:	3301      	adds	r3, #1
 80080f0:	72fb      	strb	r3, [r7, #11]
          break;
 80080f2:	e06f      	b.n	80081d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	7c12      	ldrb	r2, [r2, #16]
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	4610      	mov	r0, r2
 8008112:	4798      	blx	r3
 8008114:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008116:	e05d      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fa97 	bl	800864e <USBD_CtlError>
            err++;
 8008120:	7afb      	ldrb	r3, [r7, #11]
 8008122:	3301      	adds	r3, #1
 8008124:	72fb      	strb	r3, [r7, #11]
          break;
 8008126:	e055      	b.n	80081d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	7c12      	ldrb	r2, [r2, #16]
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	4610      	mov	r0, r2
 8008146:	4798      	blx	r3
 8008148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800814a:	e043      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa7d 	bl	800864e <USBD_CtlError>
            err++;
 8008154:	7afb      	ldrb	r3, [r7, #11]
 8008156:	3301      	adds	r3, #1
 8008158:	72fb      	strb	r3, [r7, #11]
          break;
 800815a:	e03b      	b.n	80081d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00b      	beq.n	8008180 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7c12      	ldrb	r2, [r2, #16]
 8008174:	f107 0108 	add.w	r1, r7, #8
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800817e:	e029      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fa63 	bl	800864e <USBD_CtlError>
            err++;
 8008188:	7afb      	ldrb	r3, [r7, #11]
 800818a:	3301      	adds	r3, #1
 800818c:	72fb      	strb	r3, [r7, #11]
          break;
 800818e:	e021      	b.n	80081d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a2:	699b      	ldr	r3, [r3, #24]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	7c12      	ldrb	r2, [r2, #16]
 80081a8:	f107 0108 	add.w	r1, r7, #8
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b2:	e00f      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fa49 	bl	800864e <USBD_CtlError>
            err++;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	3301      	adds	r3, #1
 80081c0:	72fb      	strb	r3, [r7, #11]
          break;
 80081c2:	e007      	b.n	80081d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa41 	bl	800864e <USBD_CtlError>
          err++;
 80081cc:	7afb      	ldrb	r3, [r7, #11]
 80081ce:	3301      	adds	r3, #1
 80081d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081d2:	bf00      	nop
      }
      break;
 80081d4:	e037      	b.n	8008246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	7c1b      	ldrb	r3, [r3, #16]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d109      	bne.n	80081f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e6:	f107 0208 	add.w	r2, r7, #8
 80081ea:	4610      	mov	r0, r2
 80081ec:	4798      	blx	r3
 80081ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081f0:	e029      	b.n	8008246 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fa2a 	bl	800864e <USBD_CtlError>
        err++;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	3301      	adds	r3, #1
 80081fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008200:	e021      	b.n	8008246 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	7c1b      	ldrb	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	f107 0208 	add.w	r2, r7, #8
 8008216:	4610      	mov	r0, r2
 8008218:	4798      	blx	r3
 800821a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	2207      	movs	r2, #7
 8008222:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008224:	e00f      	b.n	8008246 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008226:	6839      	ldr	r1, [r7, #0]
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fa10 	bl	800864e <USBD_CtlError>
        err++;
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	3301      	adds	r3, #1
 8008232:	72fb      	strb	r3, [r7, #11]
      break;
 8008234:	e007      	b.n	8008246 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa08 	bl	800864e <USBD_CtlError>
      err++;
 800823e:	7afb      	ldrb	r3, [r7, #11]
 8008240:	3301      	adds	r3, #1
 8008242:	72fb      	strb	r3, [r7, #11]
      break;
 8008244:	bf00      	nop
  }

  if (err != 0U)
 8008246:	7afb      	ldrb	r3, [r7, #11]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d11e      	bne.n	800828a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	88db      	ldrh	r3, [r3, #6]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d016      	beq.n	8008282 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008254:	893b      	ldrh	r3, [r7, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00e      	beq.n	8008278 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	88da      	ldrh	r2, [r3, #6]
 800825e:	893b      	ldrh	r3, [r7, #8]
 8008260:	4293      	cmp	r3, r2
 8008262:	bf28      	it	cs
 8008264:	4613      	movcs	r3, r2
 8008266:	b29b      	uxth	r3, r3
 8008268:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800826a:	893b      	ldrh	r3, [r7, #8]
 800826c:	461a      	mov	r2, r3
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fa69 	bl	8008748 <USBD_CtlSendData>
 8008276:	e009      	b.n	800828c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f9e7 	bl	800864e <USBD_CtlError>
 8008280:	e004      	b.n	800828c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 faba 	bl	80087fc <USBD_CtlSendStatus>
 8008288:	e000      	b.n	800828c <USBD_GetDescriptor+0x2cc>
    return;
 800828a:	bf00      	nop
  }
}
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop

08008294 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d131      	bne.n	800830a <USBD_SetAddress+0x76>
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	88db      	ldrh	r3, [r3, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d12d      	bne.n	800830a <USBD_SetAddress+0x76>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80082b4:	d829      	bhi.n	800830a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	885b      	ldrh	r3, [r3, #2]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d104      	bne.n	80082d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9bc 	bl	800864e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d6:	e01d      	b.n	8008314 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	7bfa      	ldrb	r2, [r7, #15]
 80082dc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 ff1f 	bl	8009128 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fa86 	bl	80087fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2202      	movs	r2, #2
 80082fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	e009      	b.n	8008314 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008308:	e004      	b.n	8008314 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f99e 	bl	800864e <USBD_CtlError>
  }
}
 8008312:	bf00      	nop
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	4b4e      	ldr	r3, [pc, #312]	@ (800846c <USBD_SetConfig+0x150>)
 8008332:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008334:	4b4d      	ldr	r3, [pc, #308]	@ (800846c <USBD_SetConfig+0x150>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d905      	bls.n	8008348 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f985 	bl	800864e <USBD_CtlError>
    return USBD_FAIL;
 8008344:	2303      	movs	r3, #3
 8008346:	e08c      	b.n	8008462 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800834e:	b2db      	uxtb	r3, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d002      	beq.n	800835a <USBD_SetConfig+0x3e>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d029      	beq.n	80083ac <USBD_SetConfig+0x90>
 8008358:	e075      	b.n	8008446 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800835a:	4b44      	ldr	r3, [pc, #272]	@ (800846c <USBD_SetConfig+0x150>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d020      	beq.n	80083a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008362:	4b42      	ldr	r3, [pc, #264]	@ (800846c <USBD_SetConfig+0x150>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800836c:	4b3f      	ldr	r3, [pc, #252]	@ (800846c <USBD_SetConfig+0x150>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fe ffe3 	bl	800733e <USBD_SetClassConfig>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008382:	6839      	ldr	r1, [r7, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f962 	bl	800864e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2202      	movs	r2, #2
 800838e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008392:	e065      	b.n	8008460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fa31 	bl	80087fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2203      	movs	r2, #3
 800839e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083a2:	e05d      	b.n	8008460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa29 	bl	80087fc <USBD_CtlSendStatus>
      break;
 80083aa:	e059      	b.n	8008460 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083ac:	4b2f      	ldr	r3, [pc, #188]	@ (800846c <USBD_SetConfig+0x150>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d112      	bne.n	80083da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2202      	movs	r2, #2
 80083b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083bc:	4b2b      	ldr	r3, [pc, #172]	@ (800846c <USBD_SetConfig+0x150>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083c6:	4b29      	ldr	r3, [pc, #164]	@ (800846c <USBD_SetConfig+0x150>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7fe ffd2 	bl	8007376 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa12 	bl	80087fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083d8:	e042      	b.n	8008460 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083da:	4b24      	ldr	r3, [pc, #144]	@ (800846c <USBD_SetConfig+0x150>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d02a      	beq.n	800843e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f7fe ffc0 	bl	8007376 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083f6:	4b1d      	ldr	r3, [pc, #116]	@ (800846c <USBD_SetConfig+0x150>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <USBD_SetConfig+0x150>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	4619      	mov	r1, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fe ff99 	bl	800733e <USBD_SetClassConfig>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00f      	beq.n	8008436 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f918 	bl	800864e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fe ffa5 	bl	8007376 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008434:	e014      	b.n	8008460 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f9e0 	bl	80087fc <USBD_CtlSendStatus>
      break;
 800843c:	e010      	b.n	8008460 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f9dc 	bl	80087fc <USBD_CtlSendStatus>
      break;
 8008444:	e00c      	b.n	8008460 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f900 	bl	800864e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800844e:	4b07      	ldr	r3, [pc, #28]	@ (800846c <USBD_SetConfig+0x150>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7fe ff8e 	bl	8007376 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800845a:	2303      	movs	r3, #3
 800845c:	73fb      	strb	r3, [r7, #15]
      break;
 800845e:	bf00      	nop
  }

  return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20001364 	.word	0x20001364

08008470 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	88db      	ldrh	r3, [r3, #6]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d004      	beq.n	800848c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f8e2 	bl	800864e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800848a:	e023      	b.n	80084d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b02      	cmp	r3, #2
 8008496:	dc02      	bgt.n	800849e <USBD_GetConfig+0x2e>
 8008498:	2b00      	cmp	r3, #0
 800849a:	dc03      	bgt.n	80084a4 <USBD_GetConfig+0x34>
 800849c:	e015      	b.n	80084ca <USBD_GetConfig+0x5a>
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d00b      	beq.n	80084ba <USBD_GetConfig+0x4a>
 80084a2:	e012      	b.n	80084ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	3308      	adds	r3, #8
 80084ae:	2201      	movs	r2, #1
 80084b0:	4619      	mov	r1, r3
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f948 	bl	8008748 <USBD_CtlSendData>
        break;
 80084b8:	e00c      	b.n	80084d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3304      	adds	r3, #4
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f940 	bl	8008748 <USBD_CtlSendData>
        break;
 80084c8:	e004      	b.n	80084d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f8be 	bl	800864e <USBD_CtlError>
        break;
 80084d2:	bf00      	nop
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d81e      	bhi.n	8008532 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	88db      	ldrh	r3, [r3, #6]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d004      	beq.n	8008506 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80084fc:	6839      	ldr	r1, [r7, #0]
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f8a5 	bl	800864e <USBD_CtlError>
        break;
 8008504:	e01a      	b.n	800853c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	f043 0202 	orr.w	r2, r3, #2
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	330c      	adds	r3, #12
 8008526:	2202      	movs	r2, #2
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f90c 	bl	8008748 <USBD_CtlSendData>
      break;
 8008530:	e004      	b.n	800853c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f88a 	bl	800864e <USBD_CtlError>
      break;
 800853a:	bf00      	nop
  }
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d107      	bne.n	8008566 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f94c 	bl	80087fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008564:	e013      	b.n	800858e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	885b      	ldrh	r3, [r3, #2]
 800856a:	2b02      	cmp	r3, #2
 800856c:	d10b      	bne.n	8008586 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	889b      	ldrh	r3, [r3, #4]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	b29b      	uxth	r3, r3
 8008576:	b2da      	uxtb	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f93c 	bl	80087fc <USBD_CtlSendStatus>
}
 8008584:	e003      	b.n	800858e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f860 	bl	800864e <USBD_CtlError>
}
 800858e:	bf00      	nop
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d80b      	bhi.n	80085c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	885b      	ldrh	r3, [r3, #2]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d10c      	bne.n	80085d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f91c 	bl	80087fc <USBD_CtlSendStatus>
      }
      break;
 80085c4:	e004      	b.n	80085d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f840 	bl	800864e <USBD_CtlError>
      break;
 80085ce:	e000      	b.n	80085d2 <USBD_ClrFeature+0x3c>
      break;
 80085d0:	bf00      	nop
  }
}
 80085d2:	bf00      	nop
 80085d4:	3708      	adds	r7, #8
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	781a      	ldrb	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3301      	adds	r3, #1
 8008602:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff fa40 	bl	8007a8a <SWAPBYTE>
 800860a:	4603      	mov	r3, r0
 800860c:	461a      	mov	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fa33 	bl	8007a8a <SWAPBYTE>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3301      	adds	r3, #1
 8008630:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3301      	adds	r3, #1
 8008636:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff fa26 	bl	8007a8a <SWAPBYTE>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	80da      	strh	r2, [r3, #6]
}
 8008646:	bf00      	nop
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008658:	2180      	movs	r1, #128	@ 0x80
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fcfa 	bl	8009054 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008660:	2100      	movs	r1, #0
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fcf6 	bl	8009054 <USBD_LL_StallEP>
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d042      	beq.n	800870c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800868a:	6938      	ldr	r0, [r7, #16]
 800868c:	f000 f842 	bl	8008714 <USBD_GetLen>
 8008690:	4603      	mov	r3, r0
 8008692:	3301      	adds	r3, #1
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800869a:	d808      	bhi.n	80086ae <USBD_GetString+0x3e>
 800869c:	6938      	ldr	r0, [r7, #16]
 800869e:	f000 f839 	bl	8008714 <USBD_GetLen>
 80086a2:	4603      	mov	r3, r0
 80086a4:	3301      	adds	r3, #1
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	005b      	lsls	r3, r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	e001      	b.n	80086b2 <USBD_GetString+0x42>
 80086ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	4413      	add	r3, r2
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	7812      	ldrb	r2, [r2, #0]
 80086c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	3301      	adds	r3, #1
 80086c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	4413      	add	r3, r2
 80086ce:	2203      	movs	r2, #3
 80086d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	3301      	adds	r3, #1
 80086d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086d8:	e013      	b.n	8008702 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	4413      	add	r3, r2
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	3301      	adds	r3, #1
 80086ea:	613b      	str	r3, [r7, #16]
    idx++;
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	3301      	adds	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	4413      	add	r3, r2
 80086f8:	2200      	movs	r2, #0
 80086fa:	701a      	strb	r2, [r3, #0]
    idx++;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	3301      	adds	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1e7      	bne.n	80086da <USBD_GetString+0x6a>
 800870a:	e000      	b.n	800870e <USBD_GetString+0x9e>
    return;
 800870c:	bf00      	nop
  }
}
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008724:	e005      	b.n	8008732 <USBD_GetLen+0x1e>
  {
    len++;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	3301      	adds	r3, #1
 800872a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	3301      	adds	r3, #1
 8008730:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f5      	bne.n	8008726 <USBD_GetLen+0x12>
  }

  return len;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2202      	movs	r2, #2
 8008758:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	2100      	movs	r1, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fcf9 	bl	8009166 <USBD_LL_Transmit>

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	2100      	movs	r1, #0
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fce8 	bl	8009166 <USBD_LL_Transmit>

  return USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2203      	movs	r2, #3
 80087b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	2100      	movs	r1, #0
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f000 fcec 	bl	80091a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b084      	sub	sp, #16
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	2100      	movs	r1, #0
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fcdb 	bl	80091a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2204      	movs	r2, #4
 8008808:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800880c:	2300      	movs	r3, #0
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fca7 	bl	8009166 <USBD_LL_Transmit>

  return USBD_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2205      	movs	r2, #5
 800882e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fcb5 	bl	80091a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800884c:	2200      	movs	r2, #0
 800884e:	4912      	ldr	r1, [pc, #72]	@ (8008898 <MX_USB_DEVICE_Init+0x50>)
 8008850:	4812      	ldr	r0, [pc, #72]	@ (800889c <MX_USB_DEVICE_Init+0x54>)
 8008852:	f7fe fcf7 	bl	8007244 <USBD_Init>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800885c:	f7f8 fd26 	bl	80012ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008860:	490f      	ldr	r1, [pc, #60]	@ (80088a0 <MX_USB_DEVICE_Init+0x58>)
 8008862:	480e      	ldr	r0, [pc, #56]	@ (800889c <MX_USB_DEVICE_Init+0x54>)
 8008864:	f7fe fd1e 	bl	80072a4 <USBD_RegisterClass>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800886e:	f7f8 fd1d 	bl	80012ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008872:	490c      	ldr	r1, [pc, #48]	@ (80088a4 <MX_USB_DEVICE_Init+0x5c>)
 8008874:	4809      	ldr	r0, [pc, #36]	@ (800889c <MX_USB_DEVICE_Init+0x54>)
 8008876:	f7fe fc15 	bl	80070a4 <USBD_CDC_RegisterInterface>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008880:	f7f8 fd14 	bl	80012ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008884:	4805      	ldr	r0, [pc, #20]	@ (800889c <MX_USB_DEVICE_Init+0x54>)
 8008886:	f7fe fd43 	bl	8007310 <USBD_Start>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008890:	f7f8 fd0c 	bl	80012ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008894:	bf00      	nop
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20000128 	.word	0x20000128
 800889c:	20001368 	.word	0x20001368
 80088a0:	20000094 	.word	0x20000094
 80088a4:	20000114 	.word	0x20000114

080088a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80088ac:	2200      	movs	r2, #0
 80088ae:	4905      	ldr	r1, [pc, #20]	@ (80088c4 <CDC_Init_FS+0x1c>)
 80088b0:	4805      	ldr	r0, [pc, #20]	@ (80088c8 <CDC_Init_FS+0x20>)
 80088b2:	f7fe fc11 	bl	80070d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088b6:	4905      	ldr	r1, [pc, #20]	@ (80088cc <CDC_Init_FS+0x24>)
 80088b8:	4803      	ldr	r0, [pc, #12]	@ (80088c8 <CDC_Init_FS+0x20>)
 80088ba:	f7fe fc2f 	bl	800711c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	20001a44 	.word	0x20001a44
 80088c8:	20001368 	.word	0x20001368
 80088cc:	20001644 	.word	0x20001644

080088d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	6039      	str	r1, [r7, #0]
 80088ea:	71fb      	strb	r3, [r7, #7]
 80088ec:	4613      	mov	r3, r2
 80088ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088f0:	79fb      	ldrb	r3, [r7, #7]
 80088f2:	2b23      	cmp	r3, #35	@ 0x23
 80088f4:	d84a      	bhi.n	800898c <CDC_Control_FS+0xac>
 80088f6:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <CDC_Control_FS+0x1c>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	0800898d 	.word	0x0800898d
 8008900:	0800898d 	.word	0x0800898d
 8008904:	0800898d 	.word	0x0800898d
 8008908:	0800898d 	.word	0x0800898d
 800890c:	0800898d 	.word	0x0800898d
 8008910:	0800898d 	.word	0x0800898d
 8008914:	0800898d 	.word	0x0800898d
 8008918:	0800898d 	.word	0x0800898d
 800891c:	0800898d 	.word	0x0800898d
 8008920:	0800898d 	.word	0x0800898d
 8008924:	0800898d 	.word	0x0800898d
 8008928:	0800898d 	.word	0x0800898d
 800892c:	0800898d 	.word	0x0800898d
 8008930:	0800898d 	.word	0x0800898d
 8008934:	0800898d 	.word	0x0800898d
 8008938:	0800898d 	.word	0x0800898d
 800893c:	0800898d 	.word	0x0800898d
 8008940:	0800898d 	.word	0x0800898d
 8008944:	0800898d 	.word	0x0800898d
 8008948:	0800898d 	.word	0x0800898d
 800894c:	0800898d 	.word	0x0800898d
 8008950:	0800898d 	.word	0x0800898d
 8008954:	0800898d 	.word	0x0800898d
 8008958:	0800898d 	.word	0x0800898d
 800895c:	0800898d 	.word	0x0800898d
 8008960:	0800898d 	.word	0x0800898d
 8008964:	0800898d 	.word	0x0800898d
 8008968:	0800898d 	.word	0x0800898d
 800896c:	0800898d 	.word	0x0800898d
 8008970:	0800898d 	.word	0x0800898d
 8008974:	0800898d 	.word	0x0800898d
 8008978:	0800898d 	.word	0x0800898d
 800897c:	0800898d 	.word	0x0800898d
 8008980:	0800898d 	.word	0x0800898d
 8008984:	0800898d 	.word	0x0800898d
 8008988:	0800898d 	.word	0x0800898d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800898c:	bf00      	nop
  }

  return (USBD_OK);
 800898e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	4805      	ldr	r0, [pc, #20]	@ (80089c0 <CDC_Receive_FS+0x24>)
 80089aa:	f7fe fbb7 	bl	800711c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80089ae:	4804      	ldr	r0, [pc, #16]	@ (80089c0 <CDC_Receive_FS+0x24>)
 80089b0:	f7fe fc12 	bl	80071d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80089b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20001368 	.word	0x20001368

080089c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089d4:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <CDC_Transmit_FS+0x48>)
 80089d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e00b      	b.n	8008a02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80089ea:	887b      	ldrh	r3, [r7, #2]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4806      	ldr	r0, [pc, #24]	@ (8008a0c <CDC_Transmit_FS+0x48>)
 80089f2:	f7fe fb71 	bl	80070d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80089f6:	4805      	ldr	r0, [pc, #20]	@ (8008a0c <CDC_Transmit_FS+0x48>)
 80089f8:	f7fe fbae 	bl	8007158 <USBD_CDC_TransmitPacket>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	20001368 	.word	0x20001368

08008a10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
	...

08008a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	6039      	str	r1, [r7, #0]
 8008a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2212      	movs	r2, #18
 8008a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a46:	4b03      	ldr	r3, [pc, #12]	@ (8008a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	20000144 	.word	0x20000144

08008a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2204      	movs	r2, #4
 8008a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a6a:	4b03      	ldr	r3, [pc, #12]	@ (8008a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	20000158 	.word	0x20000158

08008a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	6039      	str	r1, [r7, #0]
 8008a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a88:	79fb      	ldrb	r3, [r7, #7]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a8e:	683a      	ldr	r2, [r7, #0]
 8008a90:	4907      	ldr	r1, [pc, #28]	@ (8008ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a92:	4808      	ldr	r0, [pc, #32]	@ (8008ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008a94:	f7ff fdec 	bl	8008670 <USBD_GetString>
 8008a98:	e004      	b.n	8008aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	4904      	ldr	r1, [pc, #16]	@ (8008ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a9e:	4805      	ldr	r0, [pc, #20]	@ (8008ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008aa0:	f7ff fde6 	bl	8008670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008aa4:	4b02      	ldr	r3, [pc, #8]	@ (8008ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20002244 	.word	0x20002244
 8008ab4:	08009308 	.word	0x08009308

08008ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	4904      	ldr	r1, [pc, #16]	@ (8008ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ac8:	4804      	ldr	r0, [pc, #16]	@ (8008adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008aca:	f7ff fdd1 	bl	8008670 <USBD_GetString>
  return USBD_StrDesc;
 8008ace:	4b02      	ldr	r3, [pc, #8]	@ (8008ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3708      	adds	r7, #8
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20002244 	.word	0x20002244
 8008adc:	08009320 	.word	0x08009320

08008ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	6039      	str	r1, [r7, #0]
 8008aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	221a      	movs	r2, #26
 8008af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008af2:	f000 f843 	bl	8008b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008af6:	4b02      	ldr	r3, [pc, #8]	@ (8008b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3708      	adds	r7, #8
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	2000015c 	.word	0x2000015c

08008b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b10:	79fb      	ldrb	r3, [r7, #7]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	4907      	ldr	r1, [pc, #28]	@ (8008b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b1a:	4808      	ldr	r0, [pc, #32]	@ (8008b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b1c:	f7ff fda8 	bl	8008670 <USBD_GetString>
 8008b20:	e004      	b.n	8008b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4904      	ldr	r1, [pc, #16]	@ (8008b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b26:	4805      	ldr	r0, [pc, #20]	@ (8008b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b28:	f7ff fda2 	bl	8008670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b2c:	4b02      	ldr	r3, [pc, #8]	@ (8008b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20002244 	.word	0x20002244
 8008b3c:	08009334 	.word	0x08009334

08008b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	6039      	str	r1, [r7, #0]
 8008b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b4c:	79fb      	ldrb	r3, [r7, #7]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d105      	bne.n	8008b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	4907      	ldr	r1, [pc, #28]	@ (8008b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b56:	4808      	ldr	r0, [pc, #32]	@ (8008b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b58:	f7ff fd8a 	bl	8008670 <USBD_GetString>
 8008b5c:	e004      	b.n	8008b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	4904      	ldr	r1, [pc, #16]	@ (8008b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b62:	4805      	ldr	r0, [pc, #20]	@ (8008b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b64:	f7ff fd84 	bl	8008670 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b68:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20002244 	.word	0x20002244
 8008b78:	08009340 	.word	0x08009340

08008b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b82:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc0 <Get_SerialNum+0x44>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b88:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc4 <Get_SerialNum+0x48>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <Get_SerialNum+0x4c>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4413      	add	r3, r2
 8008b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	4909      	ldr	r1, [pc, #36]	@ (8008bcc <Get_SerialNum+0x50>)
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f000 f814 	bl	8008bd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bac:	2204      	movs	r2, #4
 8008bae:	4908      	ldr	r1, [pc, #32]	@ (8008bd0 <Get_SerialNum+0x54>)
 8008bb0:	68b8      	ldr	r0, [r7, #8]
 8008bb2:	f000 f80f 	bl	8008bd4 <IntToUnicode>
  }
}
 8008bb6:	bf00      	nop
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	1fff7a10 	.word	0x1fff7a10
 8008bc4:	1fff7a14 	.word	0x1fff7a14
 8008bc8:	1fff7a18 	.word	0x1fff7a18
 8008bcc:	2000015e 	.word	0x2000015e
 8008bd0:	2000016e 	.word	0x2000016e

08008bd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
 8008bea:	e027      	b.n	8008c3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	0f1b      	lsrs	r3, r3, #28
 8008bf0:	2b09      	cmp	r3, #9
 8008bf2:	d80b      	bhi.n	8008c0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	0f1b      	lsrs	r3, r3, #28
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	440b      	add	r3, r1
 8008c04:	3230      	adds	r2, #48	@ 0x30
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	e00a      	b.n	8008c22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	0f1b      	lsrs	r3, r3, #28
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	4619      	mov	r1, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	440b      	add	r3, r1
 8008c1c:	3237      	adds	r2, #55	@ 0x37
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	4413      	add	r3, r2
 8008c32:	2200      	movs	r2, #0
 8008c34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
 8008c38:	3301      	adds	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
 8008c3c:	7dfa      	ldrb	r2, [r7, #23]
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d3d3      	bcc.n	8008bec <IntToUnicode+0x18>
  }
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
	...

08008c54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08a      	sub	sp, #40	@ 0x28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c5c:	f107 0314 	add.w	r3, r7, #20
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	605a      	str	r2, [r3, #4]
 8008c66:	609a      	str	r2, [r3, #8]
 8008c68:	60da      	str	r2, [r3, #12]
 8008c6a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c74:	d147      	bne.n	8008d06 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c76:	2300      	movs	r3, #0
 8008c78:	613b      	str	r3, [r7, #16]
 8008c7a:	4b25      	ldr	r3, [pc, #148]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c7e:	4a24      	ldr	r2, [pc, #144]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c86:	4b22      	ldr	r3, [pc, #136]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	613b      	str	r3, [r7, #16]
 8008c90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ca0:	f107 0314 	add.w	r3, r7, #20
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	481b      	ldr	r0, [pc, #108]	@ (8008d14 <HAL_PCD_MspInit+0xc0>)
 8008ca8:	f7f9 f88c 	bl	8001dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008cac:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4812      	ldr	r0, [pc, #72]	@ (8008d14 <HAL_PCD_MspInit+0xc0>)
 8008cca:	f7f9 f87b 	bl	8001dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cce:	4b10      	ldr	r3, [pc, #64]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cd8:	6353      	str	r3, [r2, #52]	@ 0x34
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	4b0c      	ldr	r3, [pc, #48]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008cea:	4b09      	ldr	r3, [pc, #36]	@ (8008d10 <HAL_PCD_MspInit+0xbc>)
 8008cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	2043      	movs	r0, #67	@ 0x43
 8008cfc:	f7f9 f82b 	bl	8001d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d00:	2043      	movs	r0, #67	@ 0x43
 8008d02:	f7f9 f844 	bl	8001d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d06:	bf00      	nop
 8008d08:	3728      	adds	r7, #40	@ 0x28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800
 8008d14:	40020000 	.word	0x40020000

08008d18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe fb3b 	bl	80073aa <USBD_LL_SetupStage>
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d4e:	78fa      	ldrb	r2, [r7, #3]
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4613      	mov	r3, r2
 8008d54:	00db      	lsls	r3, r3, #3
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	78fb      	ldrb	r3, [r7, #3]
 8008d64:	4619      	mov	r1, r3
 8008d66:	f7fe fb75 	bl	8007454 <USBD_LL_DataOutStage>
}
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	00db      	lsls	r3, r3, #3
 8008d8c:	4413      	add	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	3320      	adds	r3, #32
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f7fe fc0e 	bl	80075ba <USBD_LL_DataInStage>
}
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b082      	sub	sp, #8
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fd48 	bl	800784a <USBD_LL_SOF>
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	79db      	ldrb	r3, [r3, #7]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	e008      	b.n	8008dee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	79db      	ldrb	r3, [r3, #7]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d102      	bne.n	8008dea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e001      	b.n	8008dee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008dea:	f7f8 fa5f 	bl	80012ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008df4:	7bfa      	ldrb	r2, [r7, #15]
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7fe fce2 	bl	80077c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fc8a 	bl	800771e <USBD_LL_Reset>
}
 8008e0a:	bf00      	nop
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fcdd 	bl	80077e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6812      	ldr	r2, [r2, #0]
 8008e36:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e3a:	f043 0301 	orr.w	r3, r3, #1
 8008e3e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	7adb      	ldrb	r3, [r3, #11]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e48:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <HAL_PCD_SuspendCallback+0x48>)
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	4a03      	ldr	r2, [pc, #12]	@ (8008e5c <HAL_PCD_SuspendCallback+0x48>)
 8008e4e:	f043 0306 	orr.w	r3, r3, #6
 8008e52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e54:	bf00      	nop
 8008e56:	3708      	adds	r7, #8
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	e000ed00 	.word	0xe000ed00

08008e60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fe fcd3 	bl	800781a <USBD_LL_Resume>
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fd2b 	bl	80078ee <USBD_LL_IsoOUTIncomplete>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eb2:	78fa      	ldrb	r2, [r7, #3]
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe fce7 	bl	800788a <USBD_LL_IsoINIncomplete>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe fd3d 	bl	8007952 <USBD_LL_DevConnected>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fd3a 	bl	8007968 <USBD_LL_DevDisconnected>
}
 8008ef4:	bf00      	nop
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d13c      	bne.n	8008f86 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f0c:	4a20      	ldr	r2, [pc, #128]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a1e      	ldr	r2, [pc, #120]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f18:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f1e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f24:	4b1a      	ldr	r3, [pc, #104]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f26:	2204      	movs	r2, #4
 8008f28:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f2a:	4b19      	ldr	r3, [pc, #100]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f30:	4b17      	ldr	r3, [pc, #92]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f36:	4b16      	ldr	r3, [pc, #88]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f38:	2202      	movs	r2, #2
 8008f3a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f3c:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f3e:	2200      	movs	r2, #0
 8008f40:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f42:	4b13      	ldr	r3, [pc, #76]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f48:	4b11      	ldr	r3, [pc, #68]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f4e:	4b10      	ldr	r3, [pc, #64]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f54:	4b0e      	ldr	r3, [pc, #56]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f5a:	480d      	ldr	r0, [pc, #52]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f5c:	f7f9 fb28 	bl	80025b0 <HAL_PCD_Init>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f66:	f7f8 f9a1 	bl	80012ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f6a:	2180      	movs	r1, #128	@ 0x80
 8008f6c:	4808      	ldr	r0, [pc, #32]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f6e:	f7fa fd54 	bl	8003a1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f72:	2240      	movs	r2, #64	@ 0x40
 8008f74:	2100      	movs	r1, #0
 8008f76:	4806      	ldr	r0, [pc, #24]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f78:	f7fa fd08 	bl	800398c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f7c:	2280      	movs	r2, #128	@ 0x80
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4803      	ldr	r0, [pc, #12]	@ (8008f90 <USBD_LL_Init+0x94>)
 8008f82:	f7fa fd03 	bl	800398c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20002444 	.word	0x20002444

08008f94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f9 fc0f 	bl	80027ce <HAL_PCD_Start>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 f942 	bl	8009240 <USBD_Get_USB_Status>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4603      	mov	r3, r0
 8008fda:	70fb      	strb	r3, [r7, #3]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70bb      	strb	r3, [r7, #2]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ff2:	78bb      	ldrb	r3, [r7, #2]
 8008ff4:	883a      	ldrh	r2, [r7, #0]
 8008ff6:	78f9      	ldrb	r1, [r7, #3]
 8008ff8:	f7fa f8e3 	bl	80031c2 <HAL_PCD_EP_Open>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 f91c 	bl	8009240 <USBD_Get_USB_Status>
 8009008:	4603      	mov	r3, r0
 800900a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800900c:	7bbb      	ldrb	r3, [r7, #14]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009030:	78fa      	ldrb	r2, [r7, #3]
 8009032:	4611      	mov	r1, r2
 8009034:	4618      	mov	r0, r3
 8009036:	f7fa f92e 	bl	8003296 <HAL_PCD_EP_Close>
 800903a:	4603      	mov	r3, r0
 800903c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	4618      	mov	r0, r3
 8009042:	f000 f8fd 	bl	8009240 <USBD_Get_USB_Status>
 8009046:	4603      	mov	r3, r0
 8009048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800904a:	7bbb      	ldrb	r3, [r7, #14]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009060:	2300      	movs	r3, #0
 8009062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7fa f9e6 	bl	8003444 <HAL_PCD_EP_SetStall>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f8de 	bl	8009240 <USBD_Get_USB_Status>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b084      	sub	sp, #16
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	460b      	mov	r3, r1
 800909c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090ac:	78fa      	ldrb	r2, [r7, #3]
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fa fa2a 	bl	800350a <HAL_PCD_EP_ClrStall>
 80090b6:	4603      	mov	r3, r0
 80090b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	4618      	mov	r0, r3
 80090be:	f000 f8bf 	bl	8009240 <USBD_Get_USB_Status>
 80090c2:	4603      	mov	r3, r0
 80090c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	da0b      	bge.n	8009104 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090ec:	78fb      	ldrb	r3, [r7, #3]
 80090ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	4613      	mov	r3, r2
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	4413      	add	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	3316      	adds	r3, #22
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	e00b      	b.n	800911c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	4613      	mov	r3, r2
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800911a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800911c:	4618      	mov	r0, r3
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	4611      	mov	r1, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f7fa f817 	bl	800317a <HAL_PCD_SetAddress>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f874 	bl	8009240 <USBD_Get_USB_Status>
 8009158:	4603      	mov	r3, r0
 800915a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915c:	7bbb      	ldrb	r3, [r7, #14]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b086      	sub	sp, #24
 800916a:	af00      	add	r7, sp, #0
 800916c:	60f8      	str	r0, [r7, #12]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
 8009172:	460b      	mov	r3, r1
 8009174:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009184:	7af9      	ldrb	r1, [r7, #11]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	f7fa f921 	bl	80033d0 <HAL_PCD_EP_Transmit>
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	4618      	mov	r0, r3
 8009196:	f000 f853 	bl	8009240 <USBD_Get_USB_Status>
 800919a:	4603      	mov	r3, r0
 800919c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800919e:	7dbb      	ldrb	r3, [r7, #22]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	607a      	str	r2, [r7, #4]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	460b      	mov	r3, r1
 80091b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80091c6:	7af9      	ldrb	r1, [r7, #11]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	f7fa f8ad 	bl	800332a <HAL_PCD_EP_Receive>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f832 	bl	8009240 <USBD_Get_USB_Status>
 80091dc:	4603      	mov	r3, r0
 80091de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f7fa f8cd 	bl	80033a0 <HAL_PCD_EP_GetRxCount>
 8009206:	4603      	mov	r3, r0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009218:	4b03      	ldr	r3, [pc, #12]	@ (8009228 <USBD_static_malloc+0x18>)
}
 800921a:	4618      	mov	r0, r3
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	20002928 	.word	0x20002928

0800922c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]

}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	2b03      	cmp	r3, #3
 8009252:	d817      	bhi.n	8009284 <USBD_Get_USB_Status+0x44>
 8009254:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <USBD_Get_USB_Status+0x1c>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	0800926d 	.word	0x0800926d
 8009260:	08009273 	.word	0x08009273
 8009264:	08009279 	.word	0x08009279
 8009268:	0800927f 	.word	0x0800927f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
    break;
 8009270:	e00b      	b.n	800928a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009272:	2303      	movs	r3, #3
 8009274:	73fb      	strb	r3, [r7, #15]
    break;
 8009276:	e008      	b.n	800928a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
    break;
 800927c:	e005      	b.n	800928a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800927e:	2303      	movs	r3, #3
 8009280:	73fb      	strb	r3, [r7, #15]
    break;
 8009282:	e002      	b.n	800928a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009284:	2303      	movs	r3, #3
 8009286:	73fb      	strb	r3, [r7, #15]
    break;
 8009288:	bf00      	nop
  }
  return usb_status;
 800928a:	7bfb      	ldrb	r3, [r7, #15]
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <memset>:
 8009298:	4402      	add	r2, r0
 800929a:	4603      	mov	r3, r0
 800929c:	4293      	cmp	r3, r2
 800929e:	d100      	bne.n	80092a2 <memset+0xa>
 80092a0:	4770      	bx	lr
 80092a2:	f803 1b01 	strb.w	r1, [r3], #1
 80092a6:	e7f9      	b.n	800929c <memset+0x4>

080092a8 <__libc_init_array>:
 80092a8:	b570      	push	{r4, r5, r6, lr}
 80092aa:	4d0d      	ldr	r5, [pc, #52]	@ (80092e0 <__libc_init_array+0x38>)
 80092ac:	4c0d      	ldr	r4, [pc, #52]	@ (80092e4 <__libc_init_array+0x3c>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	2600      	movs	r6, #0
 80092b4:	42a6      	cmp	r6, r4
 80092b6:	d109      	bne.n	80092cc <__libc_init_array+0x24>
 80092b8:	4d0b      	ldr	r5, [pc, #44]	@ (80092e8 <__libc_init_array+0x40>)
 80092ba:	4c0c      	ldr	r4, [pc, #48]	@ (80092ec <__libc_init_array+0x44>)
 80092bc:	f000 f818 	bl	80092f0 <_init>
 80092c0:	1b64      	subs	r4, r4, r5
 80092c2:	10a4      	asrs	r4, r4, #2
 80092c4:	2600      	movs	r6, #0
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	d105      	bne.n	80092d6 <__libc_init_array+0x2e>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d0:	4798      	blx	r3
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7ee      	b.n	80092b4 <__libc_init_array+0xc>
 80092d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092da:	4798      	blx	r3
 80092dc:	3601      	adds	r6, #1
 80092de:	e7f2      	b.n	80092c6 <__libc_init_array+0x1e>
 80092e0:	08009370 	.word	0x08009370
 80092e4:	08009370 	.word	0x08009370
 80092e8:	08009370 	.word	0x08009370
 80092ec:	08009374 	.word	0x08009374

080092f0 <_init>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	bf00      	nop
 80092f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f6:	bc08      	pop	{r3}
 80092f8:	469e      	mov	lr, r3
 80092fa:	4770      	bx	lr

080092fc <_fini>:
 80092fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fe:	bf00      	nop
 8009300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009302:	bc08      	pop	{r3}
 8009304:	469e      	mov	lr, r3
 8009306:	4770      	bx	lr
